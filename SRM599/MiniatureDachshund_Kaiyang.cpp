#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class MiniatureDachshund {
public:
  int maxMikan(vector <int> mikan, int weight) {
    sort(mikan.begin(), mikan.end());
    int left = 5000 - weight;
    int i = 0;
    int size = mikan.size();
    int sum = 0;
    for (; i < size; ++i) {
      if (sum + mikan[i] <= left) 
        sum += mikan[i];
      else
        break;
    }
    return i;
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
  cout << "Test " << testNum << ": [" << "{";
  for (int i = 0; int(p0.size()) > i; ++i) {
    if (i > 0) {
      cout << ",";
    }
    cout << p0[i];
  }
  cout << "}" << "," << p1;
  cout << "]" << endl;
  MiniatureDachshund *obj;
  int answer;
  obj = new MiniatureDachshund();
  clock_t startTime = clock();
  answer = obj->maxMikan(p0, p1);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << p2 << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << answer << endl;
  if (hasAnswer) {
    res = answer == p2;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  } else if (hasAnswer) {
    cout << "Match :-)" << endl;
  } else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}
int main() {
  bool all_right;
  all_right = true;
	
  vector <int> p0;
  int p1;
  int p2;
	
  {
    // ----- test 0 -----
    int t0[] = {100,100,100,100,100};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 4750;
    p2 = 2;
    all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  {
    // ----- test 1 -----
    int t0[] = {100,100,100,100,50};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 4750;
    p2 = 3;
    all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  {
    // ----- test 2 -----
    int t0[] = {120,90,130,100,110,80};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 3000;
    p2 = 6;
    all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  {
    // ----- test 3 -----
    int t0[] = {50};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 5000;
    p2 = 0;
    all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  {
    // ----- test 4 -----
    int t0[] = {200,50,200,50,200,50,200,50};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 4800;
    p2 = 4;
    all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  } else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// PROBLEM STATEMENT
// Dachshund is a popular dog breed. In this problem, a miniature dachshund is defined as a dachshund whose weight is not more than 5,000 grams.
// 
// 
// Lun the miniature dachshund loves mikan (satsuma oranges). She has just bought some mikan. You are given a vector <int> mikan. It gives the weight of all mikan she bought. For each valid i, mikan[i] is the weight of the i-th mikan in grams.
// 
// 
// You are also given an int weight. Currently, Lun weighs weight grams. When she eats i-th mikan, her weight increases by mikan[i] grams. If she eats multiple mikan, her weight increases by their total weight. She cannot eat just a part of a mikan. In other words, if she chooses to eat a mikan, she eats it completely.
// 
// 
// She wants to remain being a miniature dachshund. That is, she wants her weight not to exceed 5,000 grams. Under this condition, calculate and return the maximum number of mikan Lun can eat.
// 
// DEFINITION
// Class:MiniatureDachshund
// Method:maxMikan
// Parameters:vector <int>, int
// Returns:int
// Method signature:int maxMikan(vector <int> mikan, int weight)
// 
// 
// CONSTRAINTS
// -mikan will contain between 1 and 50 elements, inclusive.
// -Each element of mikan will be between 50 and 200, inclusive.
// -weight will be between 3,000 and 5,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {100, 100, 100, 100, 100}
// 4750
// 
// Returns: 2
// 
// Here, Lun weighs 4,750 grams and has bought 5 mikan, each of which weighs 100 grams. When she eats 2 of these, her weight will be 4,950 grams. She should not eat more.
// 
// 1)
// {100, 100, 100, 100, 50}
// 4750
// 
// Returns: 3
// 
// This time, one of the mikan is smaller. She can eat it with 2 of the 100-gram mikan. Note that her weight is allowed to be exactly 5,000 grams.
// 
// 2)
// {120, 90, 130, 100, 110, 80}
// 3000
// 
// Returns: 6
// 
// When she is light enough, she can eat all of the mikan she has bought.
// 
// 3)
// {50}
// 5000
// 
// Returns: 0
// 
// When her weight is already 5,000 grams, she should not eat anything.
// 
// 4)
// {200, 50, 200, 50, 200, 50, 200, 50}
// 4800
// 
// Returns: 4
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

