#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class ProblemsToSolve {
public:
  int minNumber(vector <int> pleasantness, int variety) {
    unsigned minValue = -1;
    int size = pleasantness.size();
    for (int i = 0; i < size; ++i) {
      for (int j = i + 1; j < size; ++j) {
        if (abs(pleasantness[i] - pleasantness[j]) >= variety) {
          int t1 = 0, t2 = 0;
          if (0 == i % 2)
            t1 = (i + 2) / 2;
          else 
            t1 = (i + 3) / 2;
          if (0 == (j - i) % 2)
            t2 = (j - i + 2) / 2;
          else
            t2 = (j - i + 3) / 2;
          if (t1 + t2 - 1 < minValue)
            minValue = t1 + t2 - 1;
        }
      }
    }
    return minValue == -1 ? size : minValue;
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
  cout << "Test " << testNum << ": [" << "{";
  for (int i = 0; int(p0.size()) > i; ++i) {
    if (i > 0) {
      cout << ",";
    }
    cout << p0[i];
  }
  cout << "}" << "," << p1;
  cout << "]" << endl;
  ProblemsToSolve *obj;
  int answer;
  obj = new ProblemsToSolve();
  clock_t startTime = clock();
  answer = obj->minNumber(p0, p1);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << p2 << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << answer << endl;
  if (hasAnswer) {
    res = answer == p2;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  } else if (hasAnswer) {
    cout << "Match :-)" << endl;
  } else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}
int main() {
  bool all_right;
  all_right = true;
	
  vector <int> p0;
  int p1;
  int p2;
	
  {
    // ----- test 0 -----
    int t0[] = {17, 25, 22, 26, 21, 10, 22, 27, 17, 12, 11, 11, 4, 12, 7, 2, 27, 6, 3, 15, 11, 1, 12, 5, 29, 21, 28, 24, 1};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 18;
    p2 = 7;
    all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  {
    // ----- test 1 -----
    int t0[] = {1,2,3,4,5};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 4;
    p2 = 3;
    all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  {
    // ----- test 2 -----
    int t0[] = {10,1,12,101};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 100;
    p2 = 3;
    all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  {
    // ----- test 3 -----
    int t0[] = {10,1};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 9;
    p2 = 2;
    all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  {
    // ----- test 4 -----
    int t0[] = {6,2,6,2,6,3,3,3,7};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 4;
    p2 = 2;
    all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  } else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// PROBLEM STATEMENT
// 
// Your teacher has given you some problems to solve.  You must first solve problem 0.  After solving each problem i, you must either move on to problem i+1 or skip ahead to problem i+2.  You are not allowed to skip more than one problem.  For example, {0, 2, 3, 5} is a valid order, but {0, 2, 4, 7} is not because the skip from 4 to 7 is too long.
// 
// 
// You are given a vector <int> pleasantness, where pleasantness[i] indicates how much you like problem i.  The teacher will let you stop solving problems once the range of pleasantness you've encountered reaches a certain threshold.  Specifically, you may stop once the difference between the maximum and minimum 
// pleasantness of the problems you've solved is greater than or equal to the int variety.  If this never happens, you must solve all the problems.  
// Return the minimum number of problems you must solve to satisfy the teacher's requirements.
// 
// 
// 
// DEFINITION
// Class:ProblemsToSolve
// Method:minNumber
// Parameters:vector <int>, int
// Returns:int
// Method signature:int minNumber(vector <int> pleasantness, int variety)
// 
// 
// CONSTRAINTS
// -pleasantness will contain between 1 and 50 elements, inclusive.
// -Each element of pleasantness will be between 0 and 1000, inclusive.
// -variety will be between 1 and 1000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {1, 2, 3}
// 2
// 
// Returns: 2
// 
// Solve the 0-th problem, and the 2-nd after it.
// 
// 1)
// {1, 2, 3, 4, 5}
// 4
// 
// Returns: 3
// 
// Obviously, the first and the last problems should be solved. Skip a problem ahead twice in a row.
// 
// 2)
// {10, 1, 12, 101}
// 100
// 
// Returns: 3
// 
// 
// 
// 3)
// {10, 1}
// 9
// 
// Returns: 2
// 
// 
// 
// 4)
// {6, 2, 6, 2, 6, 3, 3, 3, 7}
// 4
// 
// Returns: 2
// 
// You can stop after solving the first 2 problems.
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

