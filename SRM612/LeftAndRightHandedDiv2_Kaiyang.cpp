#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class LeftAndRightHandedDiv2 {
public:
  int count(string S) {
    int size = S.size();
    int count = 0;
    for (int i = 0; i < size; ++i) {
      if (S[i] == 'R' && i + 1 < size && S[i + 1] == 'L')
        ++count;
    }
    return count;
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	LeftAndRightHandedDiv2 *obj;
	int answer;
	obj = new LeftAndRightHandedDiv2();
	clock_t startTime = clock();
	answer = obj->count(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = "L";
	p1 = 0;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "RRR";
	p1 = 0;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "LRLRLR";
	p1 = 2;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "LLLRRR";
	p1 = 0;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "RLRLRL";
	p1 = 3;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Some students are seated in a row next to each other.
// Each of them is either left-handed or right-handed.
// You are given a string S that describes the row of students.
// Each character of S is either 'L' or 'R', representing a left-handed or a right-handed person, respectively.
// The characters describe the row from the left to the right: for all i, the person described by character i+1 sits to the right of the person described by character i.
// 
// The students are trying to write down lecture notes.
// Whenever a left-handed person sits immediately to the right of a right-handed person, their elbows collide when they both try to write at the same time.
// Compute and return the number of elbow collisions, assuming that all students in the row attempt to write at the same time.
// 
// DEFINITION
// Class:LeftAndRightHandedDiv2
// Method:count
// Parameters:string
// Returns:int
// Method signature:int count(string S)
// 
// 
// CONSTRAINTS
// -S will contain between 1 and 50 characters, inclusive.
// -Each character of S will be either 'L' or 'R'.
// 
// 
// EXAMPLES
// 
// 0)
// "L"
// 
// Returns: 0
// 
// There's only one person in the row so there are no collisions.
// 
// 1)
// "RRR"
// 
// Returns: 0
// 
// Everybody is right-handed so there are no collisions.
// 
// 2)
// "LRLRLR"
// 
// Returns: 2
// 
// There will be two collisions: one of them between the second and the third person from the left (described by S[1] and S[2]) and the other between the fourth and the fifth person.
// 
// 3)
// "LLLRRR"
// 
// Returns: 0
// 
// 
// 
// 4)
// "RLRLRL"
// 
// Returns: 3
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
