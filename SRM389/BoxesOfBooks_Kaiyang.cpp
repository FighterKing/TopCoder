#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class BoxesOfBooks {
public:
  int boxes(vector <int> weights, int maxWeight) {
    int mw = maxWeight;
    int count = 0;
    bool in = false;
    for (int i = 0; i < weights.size(); ++i) {
      int w = weights[i];
      if (w > maxWeight)
        break;

      in = true;
      if (mw < w) {
        mw = maxWeight - w;
        ++count;
      }
      else {
        mw -= w;
      }
    }
    return count + in;
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
  cout << "Test " << testNum << ": [" << "{";
  for (int i = 0; int(p0.size()) > i; ++i) {
    if (i > 0) {
      cout << ",";
    }
    cout << p0[i];
  }
  cout << "}" << "," << p1;
  cout << "]" << endl;
  BoxesOfBooks *obj;
  int answer;
  obj = new BoxesOfBooks();
  clock_t startTime = clock();
  answer = obj->boxes(p0, p1);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << p2 << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << answer << endl;
  if (hasAnswer) {
    res = answer == p2;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  } else if (hasAnswer) {
    cout << "Match :-)" << endl;
  } else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}
int main() {
  bool all_right;
  all_right = true;
	
  vector <int> p0;
  int p1;
  int p2;
	
  {
    // ----- test 0 -----
    int t0[] = {5,5,5,5,5,5};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 10;
    p2 = 3;
    all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  {
    // ----- test 1 -----
    int t0[] = {51,51,51,51,51};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 100;
    p2 = 5;
    all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  {
    // ----- test 2 -----
    int t0[] = {1,1,1,7,7,7};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 8;
    p2 = 4;
    all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  {
    // ----- test 3 -----
    int t0[] = {12,1,11,2,10,3,4,5,6,6,1};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 12;
    p2 = 6;
    all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  {
    // ----- test 4 -----
    p0.clear() /*{}*/;
    p1 = 7;
    p2 = 0;
    all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  {
    // ----- test 5 -----
    int t0[] = {20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 1000;
    p2 = 1;
    all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  } else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// PROBLEM STATEMENT
// 
// You are packing a stack of books into some boxes,
// packing as many books as you can into each box without exceeding a given weight limit.
// Once you have packed as many books into a box as you can, you close and seal that box, and then begin filling the next one.
// You take the books off the stack in order, packing each one before picking up the next.
// 
// 
// 
// The weights of the books will be given as a vector <int> weights,
// where the first element is the weight of the book on top of the stack
// and the last element is the weight of the book on the bottom of the stack.
// The maximum weight that can fit into each box will be given as an int maxWeight.
// Return the minimum number of boxes you will need.
// 
// 
// 
// DEFINITION
// Class:BoxesOfBooks
// Method:boxes
// Parameters:vector <int>, int
// Returns:int
// Method signature:int boxes(vector <int> weights, int maxWeight)
// 
// 
// CONSTRAINTS
// -weights will contain between 0 and 50 elements, inclusive.
// -maxWeight will be between 1 and 1000, inclusive.
// -Each element of weights will be between 1 and maxWeight, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// { 5, 5, 5, 5, 5, 5 }
// 10
// 
// Returns: 3
// 
// You have 6 books that weigh 5 kilograms each.  Each box can hold 10 kilograms (2 books).  Therefore, you need 3 boxes.
// 
// 1)
// { 51, 51, 51, 51, 51 }
// 100
// 
// Returns: 5
// 
// Each box can hold 100 kg, but since the books weigh 51 kg each, you can only put one in each box.
// 
// 2)
// { 1, 1, 1, 7, 7, 7 }
// 8
// 
// Returns: 4
// 
// You would like to put one 1 kg book and one 7 kg book in each of 3 boxes.  But, since you must pack the books in order, you end up putting the three 1 kg books in one box and each of the three 7 kg books in its own box, for a total of 4 boxes.
// 
// 3)
// { 12, 1, 11, 2, 10, 3, 4, 5, 6, 6, 1 }
// 12
// 
// Returns: 6
// 
// 
// 
// 4)
// { }
// 7
// 
// Returns: 0
// 
// 
// 
// 5)
// { 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
//   20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
//   20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
//   20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
//   20, 20, 20, 20, 20, 20, 20, 20, 20, 20 }
// 1000
// 
// Returns: 1
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

