#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class LittleElephantAndDouble {
public:
  string getAnswer(vector <int> A) {
    int min = *min_element(A.begin(), A.end());
    for (auto i : A) {
      if (!(i % min == 0 && pow(2, (int)log2(i / min)) == (i / min)))
          return "NO";
    }
      return "YES";
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, string p1) {
  cout << "Test " << testNum << ": [" << "{";
  for (int i = 0; int(p0.size()) > i; ++i) {
    if (i > 0) {
      cout << ",";
    }
    cout << p0[i];
  }
  cout << "}";
  cout << "]" << endl;
  LittleElephantAndDouble *obj;
  string answer;
  obj = new LittleElephantAndDouble();
  clock_t startTime = clock();
  answer = obj->getAnswer(p0);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << "\"" << p1 << "\"" << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << "\"" << answer << "\"" << endl;
  if (hasAnswer) {
    res = answer == p1;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  } else if (hasAnswer) {
    cout << "Match :-)" << endl;
  } else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}
int main() {
  bool all_right;
  all_right = true;
	
  vector <int> p0;
  string p1;
	
  {
    // ----- test 0 -----
    int t0[] = {1,2};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = "YES";
    all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 1 -----
    int t0[] = {1,2,3};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = "NO";
    all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 2 -----
    int t0[] = {4,8,2,1,16};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = "YES";
    all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 3 -----
    int t0[] = {94,752,94,376,1504};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = "YES";
    all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 4 -----
    int t0[] = {148,298,1184};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = "NO";
    all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 5 -----
    int t0[] = {7,7,7,7};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = "YES";
    all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
    // ------------------
  }
	
  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  } else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// PROBLEM STATEMENT
// 
// Little Elephant from the Zoo of Lviv likes integers.
// 
// 
// 
// 
// You are given an vector <int> A. On a single turn, Little Elephant can double (i.e., multiply by 2) any element of A. He may double the same element more than once, if he wants to. He wants to obtain an array in which all elements are equal. Return "YES" (quotes for clarity) if it is possible to do that and "NO" otherwise.
// 
// 
// 
// DEFINITION
// Class:LittleElephantAndDouble
// Method:getAnswer
// Parameters:vector <int>
// Returns:string
// Method signature:string getAnswer(vector <int> A)
// 
// 
// NOTES
// -The return value is case-sensitive. Make sure that you return the exact strings "YES" and "NO".
// 
// 
// CONSTRAINTS
// -A will contain between 1 and 50 elements, inclusive.
// -Each element of A will be between 1 and 1,000,000,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {1, 2}
// 
// Returns: "YES"
// 
// One possible way of making all elements equal is to double the element at index 0.
// 
// 1)
// {1, 2, 3}
// 
// Returns: "NO"
// 
// It's impossible to make all three elements equal in this case.
// 
// 2)
// {4, 8, 2, 1, 16}
// 
// Returns: "YES"
// 
// 
// 
// 3)
// {94, 752, 94, 376, 1504}
// 
// Returns: "YES"
// 
// 
// 
// 4)
// {148, 298, 1184}
// 
// Returns: "NO"
// 
// 
// 
// 5)
// {7, 7, 7, 7}
// 
// Returns: "YES"
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

