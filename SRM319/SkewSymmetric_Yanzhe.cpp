#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class SkewSymmetric {
public:
	int minChanges(vector <string> M) {
		vector<vector<int> > m;
		m.resize(M.size());
		int i, j;
		for (int k = 0; k < M.size(); k++) {
			for (i = -1, j = 0; j < M[k].size();) {
				for (j = i + 1; j < M[k].size() && M[k][j] != ' '; j++) {}
				if (j - i - 1 > 0)
					m[k].push_back(stoi(M[k].substr(i+1, j-i-1)));
				i = j; j++;
			}
		}

		int ret = 0;
		int N = m.size();
		for (int i = 0; i < N; i++)
			for (int j = 0; j < N; j++)
				if (m[j][i] * (-1) != m[i][j])
					ret += (i == j) ? 2 : 1;
		return ret / 2;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	SkewSymmetric *obj;
	int answer;
	obj = new SkewSymmetric();
	clock_t startTime = clock();
	answer = obj->minChanges(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"1 2 8","-2 1 0","3 99 3"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"0 1 1 1 1 1","-1 0 1 1 1 1","-1 -1 0 1 1 1","-1 -1 -1 0 1 1","-1 -1 -1 -1 0 1","0 0 0 0 0 0"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"0 0 0 0","0 0 0 0","0 0 0 0","0 0 0 0"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"1 0","0 1"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// A skew symmetric matrix M satisfies MT = -M, where MT denotes the transpose of the matrix M and -M denotes the matrix obtained by multiplying each entry of M by -1. The transpose of a matrix M is obtained by replacing the element in the i'th row and j'th column of M with the element in the j'th row and i'th column of M. Note that this requires the diagonal elements of a skew-symmetric matrix to be equal to 0.
// Create a class SkewSymmetric which contains a method minChanges. The method will take a vector <string> M, each element of which is a single space separated list of integers. The j'th number in the i'th element of M represents the value at row i and column j of the matrix. The method should return the minimum number of values in M that must be changed such that the resulting matrix is skew symmetric.
// 
// DEFINITION
// Class:SkewSymmetric
// Method:minChanges
// Parameters:vector <string>
// Returns:int
// Method signature:int minChanges(vector <string> M)
// 
// 
// CONSTRAINTS
// -M will contain between 2 and 10 elements, inclusive.
// -Each element of M will be a single space separated list of exactly n integers, where n is the number of elements in M.
// -Each element of M will contain between 1 and 50 characters, inclusive.
// -Each integer in M will be between -99 and 99 inclusive, with no extra leading zeros.
// -The integer zero will be represented as '0' (quotes for clarity) only, and not '-0' (quotes for clarity) in M.
// 
// 
// EXAMPLES
// 
// 0)
// {"1 2 8", "-2 1 0", "3 99 3"}
// 
// Returns: 5
// 
// One possible skew-symmetric matrix obtained by changing 5 elements in M is:
// 
//   0  2  -3
//  -2  0 -99
//   3 99   0
// 
// Note that the diagonal elements must be 0.
// 
// 1)
// {"0 1 1 1 1 1", "-1 0 1 1 1 1", "-1 -1 0 1 1 1", 
// "-1 -1 -1 0 1 1", "-1 -1 -1 -1 0 1", "0 0 0 0 0 0"}
// 
// Returns: 5
// 
// 
// 
// 2)
// {"0 0 0 0", "0 0 0 0", "0 0 0 0", "0 0 0 0"}
// 
// Returns: 0
// 
// 
// 
// 3)
// {"1 0", "0 1"}
// 
// Returns: 2
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
