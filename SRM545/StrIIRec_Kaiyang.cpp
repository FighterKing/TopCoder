#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class StrIIRec {
public:
  string recovstr(int n, int minInv, string minStr) {
    int size = minStr.size();
    vector<int> v(n, 0);
    
    // remaining char;
    vector<char> vc(n);
    for (int i = 0; i < n; ++i)
      vc[i] = 'a' + i;
    
    int sum = 0;
    for (int i = 0; i < size; ++i) {
      int count = 0;
      auto it = find(vc.begin(), vc.end(), minStr[i]);
      vc.erase(it);
      for (int j = 0; j < i; ++j) {
        if (minStr[j] > minStr[i])
          ++count;
      }
      v[i] = count;
      sum += count;
    }
    
    // complete the minStr
    sort(vc.begin(), vc.end());
    string tt(vc.begin(), vc.end());
    minStr += tt;
    
    for (int i = size; i < n; ++i) {
      int count = 0;
      for (int j = 0; j < i; ++j) {
          if (minStr[j] > minStr[i])
            ++count;
        }
      v[i] = count;
      sum += count;
    }

    if (sum > minInv)
      return minStr;
    
    // find the pos
    for (int i = n - 1; i >= 0; --i) {
      sum -= v[i];
      int diff = n - i;
      int count = 0;
      for (int j = i; j < n; ++j) {
        for (int jj = 0; jj < i; ++jj) {
          if (minStr[jj] > minStr[j])
            ++count;
        }
      }
      if (sum + diff * (diff - 1) / 2 + count >= minInv) {
        sort(minStr.rbegin(), minStr.rend() - i);
        string str(minStr.rbegin(), minStr.rend() - i);
        int anotherDiff = minInv - sum - count;
        int posI = anotherDiff - (diff - 2) * (diff - 1) / 2;
        swap(minStr[i], minStr[n - 1 - posI]);
        sort(minStr.rbegin(), minStr.rend() - i - 1);
        return minStr;
      }
    }
    return minStr;
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, string p2, bool hasAnswer, string p3) {
  cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "\"" << p2 << "\"";
  cout << "]" << endl;
  StrIIRec *obj;
  string answer;
  obj = new StrIIRec();
  clock_t startTime = clock();
  answer = obj->recovstr(p0, p1, p2);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << "\"" << p3 << "\"" << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << "\"" << answer << "\"" << endl;
  if (hasAnswer) {
    res = answer == p3;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  } else if (hasAnswer) {
    cout << "Match :-)" << endl;
  } else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}
int main() {
  bool all_right;
  all_right = true;

  int p0;
  int p1;
  string p2;
  string p3;

  {
    // ----- test 0 -----
    p0 = 8;
    p1 = 16;
    p2 = "af";
    p3 = "afdhgecb";
    all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
    // ------------------
  }

  {
    // ----- test 1 -----
    p0 = 9;
    p1 = 1;
    p2 = "efcdgab";
    p3 = "efcdgabhi";
    all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
    // ------------------
  }

  {
    // ----- test 2 -----
    p0 = 11;
    p1 = 55;
    p2 = "debgikjfc";
    p3 = "kjihgfedcba";
    all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
    // ------------------
  }

  {
    // ----- test 3 -----
    p0 = 15;
    p1 = 0;
    p2 = "e";
    p3 = "eabcdfghijklmno";
    all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
    // ------------------
  }

  {
    // ----- test 4 -----
    p0 = 9;
    p1 = 20;
    p2 = "fcdebiha";
    p3 = "fcdehigba";
    all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
    // ------------------
  }

  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  } else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// PROBLEM STATEMENT
// For a given string S of length n an inversion is a pair of integers
// (i, j) such that 0 <= i < j <= n-1 and S[i] > S[j]. (That is, the
// character at 0-based index i is greater than the character at
// 0-based index j.) For example, the string "abcab" has 3 inversions:
// (1, 3), (2, 3), and (2, 4).
// 
// Given are ints n and minInv, and a string minStr.
// We will consider all strings that are permutations of the first n
// lowercase English letters.
// That is, these strings have length n and contain each of the first
// n letters exactly once.
// Out of these strings, return the lexicographically smallest string
// R with the following two properties:
// 
// The number of inversions in R is at least minInv.
// The string R is not lexicographically smaller than minStr.
// 
// If there is no such string, return an empty string instead.
// 
// 
// DEFINITION
// Class:StrIIRec
// Method:recovstr
// Parameters:int, int, string
// Returns:string
// Method signature:string recovstr(int n, int minInv, string minStr)
// 
// 
// NOTES
// -A string A is lexicographically smaller than a string B if A is a
// prefix of B or A contains a smaller character at the first position
// where the strings differ.
// 
// 
// CONSTRAINTS
// -n will be between 1 and 20, inclusive.
// -minInv will be between 0 and n*(n-1)/2, inclusive.
// -minStr will contain between 1 and n characters, inclusive.
// -Each character in minStr will be one of the first n lowercase
// Latin letters.
// -All characters in minStr will be unique.
// 
// 
// EXAMPLES
// 
// 0)
// 2
// 1
// "ab"
// 
// Returns: "ba"
// 
// You must find the lexicographically smallest string that has at
// least 1 inversion and is not lexicographically smaller than "ab".
// 
// 1)
// 9
// 1
// "efcdgab"
// 
// Returns: "efcdgabhi"
// 
// 2)
// 11
// 55
// "debgikjfc"
// 
// Returns: "kjihgfedcba"
// 
// "kjihgfedcba" is the only string that has at least 55 inversions.
// 
// 3)
// 15
// 0
// "e"
// 
// Returns: "eabcdfghijklmno"
// 
// 4)
// 9
// 20
// "fcdebiha"
// 
// Returns: "fcdehigba"
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
