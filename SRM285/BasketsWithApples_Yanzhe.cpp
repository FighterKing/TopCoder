#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class BasketsWithApples {
public:
	int removeExcess(vector <int> apples) {
		int ret = 0;
		sort(apples.begin(), apples.end());
		int N = apples.size();
		for (int i = 0; i < N; i++) {
			if (apples[i] * (N - i) > ret)
				ret = apples[i] * (N - i);
		}
		return ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	BasketsWithApples *obj;
	int answer;
	obj = new BasketsWithApples();
	clock_t startTime = clock();
	answer = obj->removeExcess(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	
	{
	// ----- test 0 -----
	int t0[] = {1,2,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {5,0,30,14};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 30;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {51,8,38,49};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 114;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {24,92,38,0,79,45};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 158;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// We have some baskets containing apples, and we would like to perform the following procedure in a way that maximizes the number of remaining apples.  First, we discard some (or none) of the baskets completely.  Then, if the remaining baskets do not all contain the same number of apples, we remove excess apples from the baskets until they do.
// You will be given a vector <int> apples where the i-th element of apples is the number of apples in the i-th basket. Return the number of apples remaining after the procedure described above is performed.
// 
// 
// DEFINITION
// Class:BasketsWithApples
// Method:removeExcess
// Parameters:vector <int>
// Returns:int
// Method signature:int removeExcess(vector <int> apples)
// 
// 
// CONSTRAINTS
// -apples will contain between 1 and 50 elements, inclusive.
// -Each element in apples will be between 0 and 1000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {1, 2, 3}
// 
// Returns: 4
// 
// We should remove the first basket and leave two apples in each of the two remaining baskets.
// 
// 1)
// {5, 0, 30, 14}
// 
// Returns: 30
// 
// We should leave only the third basket.
// 
// 2)
// {51, 8, 38, 49}
// 
// Returns: 114
// 
// 3)
// {24, 92, 38, 0, 79, 45}
// 
// Returns: 158
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
