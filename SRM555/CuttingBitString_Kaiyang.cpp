// DP/BF
// O(n^2)
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class CuttingBitString {
  bool isPower5(unsigned long n) {
    unsigned long test = 1;
    while (test < n) {
      test *= 5;
    }
    return test == n;
  }
public:
  int getmin(string S) {
    int size = S.size();
    vector<unsigned> v(size, -1);
    for (int i = 0; i < size; ++i) {
      string str = S.substr(0, i + 1);
      bitset<51> b(str);
      if (str[0] != '0' && isPower5(b.to_ulong())) {
        v[i] = 1;
        continue;
      }

      for (int j = 0; j < i; ++j) {
        str = S.substr(j + 1, i - j);
        bitset<51> b(str);
        if (str[0] != '0' && v[j] != -1 && isPower5(b.to_ulong())) 
          v[i] = min(v[i], v[j] + 1);
      }
    }

    return v[size - 1];
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
  cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
  cout << "]" << endl;
  CuttingBitString *obj;
  int answer;
  obj = new CuttingBitString();
  clock_t startTime = clock();
  answer = obj->getmin(p0);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << p1 << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << answer << endl;
  if (hasAnswer) {
    res = answer == p1;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  } else if (hasAnswer) {
    cout << "Match :-)" << endl;
  } else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}
int main() {
  bool all_right;
  all_right = true;

  string p0;
  int p1;

  {
    // ----- test 0 -----
    p0 = "101101101";
    p1 = 3;
    all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
    // ------------------
  }

  {
    // ----- test 1 -----
    p0 = "1111101";
    p1 = 1;
    all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
    // ------------------
  }

  {
    // ----- test 2 -----
    p0 = "00000";
    p1 = -1;
    all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    // ------------------
  }

  {
    // ----- test 3 -----
    p0 = "110011011";
    p1 = 3;
    all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
    // ------------------
  }

  {
    // ----- test 4 -----
    p0 = "1000101011";
    p1 = -1;
    all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
    // ------------------
  }

  {
    // ----- test 5 -----
    p0 = "111011100110101100101110111";
    p1 = 5;
    all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
    // ------------------
  }

  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  } else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// PROBLEM STATEMENT
// We are in a distant future.
// After the downfall of mankind, the Earth is now ruled by fairies.
// The "Turing game Online" website is hot among fairies right now.
// On this website, everyone can play the programming puzzle "Turing
// game".
// 
// Fairies love powers of 5, that is, the numbers 1, 5, 25, 125, 625,
// and so on.
// In the Turing game, the player is given a string of bits (zeros and
// ones).
// The ideal situation is when the string is represents a power of 5
// in binary, with no leading zeros.
// If that is not the case, the fairy player tries to cut the given
// string into pieces, each piece being a binary representation of a
// power of 5, with no leading zeros.
// Of course, it may be the case that even this is impossible.
// In that case, the fairy player becomes depressed, and bad things
// happen when a fairy gets depressed.
// You, as one of the surviving humans, are in charge of checking the
// bit strings to prevent the bad things from happening.
// 
// You are given a string S that consists of characters '0' and '1'
// only.
// S represents the string given to a player of the Turing game.
// Return the smallest positive integer K such that it is possible to
// cut S into K pieces, each of them being a power of 5.
// If there is no such K, return -1 instead.
// 
// DEFINITION
// Class:CuttingBitString
// Method:getmin
// Parameters:string
// Returns:int
// Method signature:int getmin(string S)
// 
// 
// CONSTRAINTS
// -S will contain between 1 and 50 characters, inclusive.
// -Each character in S will be either '0' or '1'.
// 
// 
// EXAMPLES
// 
// 0)
// "101101101"
// 
// Returns: 3
// 
// We can split the given string into three "101"s.
// Note that "101" is 5 in binary.
// 
// 1)
// "1111101"
// 
// Returns: 1
// 
// "1111101" is 5^3.
// 
// 2)
// "00000"
// 
// Returns: -1
// 
// 0 is not a power of 5.
// 
// 3)
// "110011011"
// 
// Returns: 3
// 
// Split it into "11001", "101" and "1".
// 
// 4)
// "1000101011"
// 
// Returns: -1
// 
// 
// 
// 5)
// "111011100110101100101110111"
// 
// Returns: 5
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
