#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class MinimalDifference {
  int digitalSum(int a) {
    int sum = 0;
    while (a != 0) {
      sum += a % 10;
      a /= 10;
    }
    return sum;
  }
public:
  int findNumber(int A, int B, int C) {
    int digitalC = digitalSum(C);
    unsigned min = -1;
    int num = A;
    for (int i = A; i <= B; ++i) {
      int diff = abs(digitalSum(i) - digitalC);
      if (min > diff) {
        min = diff;
        num = i;
      }
    }

    return num;
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, int p3) {
  cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
  cout << "]" << endl;
  MinimalDifference *obj;
  int answer;
  obj = new MinimalDifference();
  clock_t startTime = clock();
  answer = obj->findNumber(p0, p1, p2);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << p3 << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << answer << endl;
  if (hasAnswer) {
    res = answer == p3;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  } else if (hasAnswer) {
    cout << "Match :-)" << endl;
  } else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}
int main() {
  bool all_right;
  all_right = true;

  int p0;
  int p1;
  int p2;
  int p3;

  {
    // ----- test 0 -----
    p0 = 1;
    p1 = 9;
    p2 = 10;
    p3 = 1;
    all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
    // ------------------
  }

  {
    // ----- test 1 -----
    p0 = 11;
    p1 = 20;
    p2 = 20;
    p3 = 11;
    all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
    // ------------------
  }

  {
    // ----- test 2 -----
    p0 = 1;
    p1 = 1;
    p2 = 999;
    p3 = 1;
    all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
    // ------------------
  }

  {
    // ----- test 3 -----
    p0 = 100;
    p1 = 1000;
    p2 = 99;
    p3 = 189;
    all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
    // ------------------
  }

  {
    // ----- test 4 -----
    p0 = 1987;
    p1 = 9123;
    p2 = 1;
    p3 = 2000;
    all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
    // ------------------
  }

  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  } else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
