#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class ChangingString {
public:
	int distance(string A, string B, int K) {
		int n = A.size();
		vector<int> dist;
		for (int i = 0; i < n; i++)
			dist.push_back(abs(A[i]-B[i]));
		sort(dist.begin(), dist.end());
		int p;
		for (p = 0; p < n && dist[p] == 0; p++) {}
		if (K < (n-p))
			return accumulate(dist.begin()+p, dist.begin()+(n-K), 0);
		else
			return K - (n-p);
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, string p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"" << "," << p2;
	cout << "]" << endl;
	ChangingString *obj;
	int answer;
	obj = new ChangingString();
	clock_t startTime = clock();
	answer = obj->distance(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = "ab";
	p1 = "ba";
	p2 = 2;
	p3 = 0;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "aa";
	p1 = "aa";
	p2 = 2;
	p3 = 2;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "aaa";
	p1 = "baz";
	p2 = 1;
	p3 = 1;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "fdfdfdfdfdsfabasd";
	p1 = "jhlakfjdklsakdjfk";
	p2 = 8;
	p3 = 24;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "aa";
	p1 = "bb";
	p2 = 2;
	p3 = 0;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You are given two strings A and B that have the same length and contain only lowercase letters ('a'-'z').  The distance between two letters is defined as the absolute value of their difference.  The distance between A and B is defined as the sum of the differences between each letter in A and the letter in B at the same position. For example, the distance between "abcd" and "bcda" is 6 (1 + 1 + 1 + 3).
// 
// You must change exactly K characters in A into other lowercase letters.  Return the minimum possible distance between A and B after you perform that change.
// 
// DEFINITION
// Class:ChangingString
// Method:distance
// Parameters:string, string, int
// Returns:int
// Method signature:int distance(string A, string B, int K)
// 
// 
// CONSTRAINTS
// -A and B will each contain between 1 and 50 characters, inclusive.
// -K will be between 1 and the length of A, inclusive.
// -A and B will contain the same number of characters.
// -A and B will contain only lowercase letters ('a' - 'z').
// 
// 
// EXAMPLES
// 
// 0)
// "ab"
// "ba"
// 2
// 
// Returns: 0
// 
// The minimum distance (equal to 0) can be achieved when we change 'a' to 'b' and 'b' to 'a'.
// 
// 1)
// "aa"
// "aa"
// 2
// 
// Returns: 2
// 
// We must change both letters 'a' to some other letters. Changing them to 'b' results in the smallest distance.
// 
// 
// 2)
// "aaa"
// "baz"
// 1
// 
// Returns: 1
// 
// 
// 
// 3)
// "fdfdfdfdfdsfabasd"
// "jhlakfjdklsakdjfk"
// 8
// 
// Returns: 24
// 
// 
// 
// 4)
// "aa"
// "bb"
// 2
// 
// Returns: 0
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
