// I don't know how to prove the correctness
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class BinPackingEasy {
public:
  int minBins(vector <int> item) {
    sort(item.rbegin(), item.rend());
    int count = 0;
    const int SIZE_BIN = 300;
    bool *status = new bool[item.size()];
    fill(status, status + item.size(), false);
    for (int i = 0; i < item.size(); ++i) {
      if (status[i])
        continue;
      unsigned diff = -1;
      status[i] = true;
      int j;
      int record = -1;
      for (j = i + 1; j < item.size(); ++j) {
        int t = SIZE_BIN - item[i] - item[j];
        if (!status[j] && t >= 0 && t < diff) {
          record = j;
          diff = t;
        }
      }
      if (record != -1)
        status[record] = true;
      ++count;
    }
    return count;
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
  cout << "Test " << testNum << ": [" << "{";
  for (int i = 0; int(p0.size()) > i; ++i) {
    if (i > 0) {
      cout << ",";
    }
    cout << p0[i];
  }
  cout << "}";
  cout << "]" << endl;
  BinPackingEasy *obj;
  int answer;
  obj = new BinPackingEasy();
  clock_t startTime = clock();
  answer = obj->minBins(p0);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << p1 << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << answer << endl;
  if (hasAnswer) {
    res = answer == p1;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  } else if (hasAnswer) {
    cout << "Match :-)" << endl;
  } else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}
int main() {
  bool all_right;
  all_right = true;
	
  vector <int> p0;
  int p1;
	
  {
    // ----- test 0 -----
    int t0[] = {150,150,150,150,150};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 3;
    all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 1 -----
    int t0[] = {130,140,150,160};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 2;
    all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 2 -----
    int t0[] = {101,101,101,101,101,101,101,101,101};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 5;
    all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 3 -----
    int t0[] = {101,200,101,101,101,101,200,101,200};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 6;
    all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 4 -----
    int t0[] = {123,145,167,213,245,267,289,132,154,176,198};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 8;
    all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
    // ------------------
  }
	
  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  } else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// PROBLEM STATEMENT
// Fox Ciel has some items. The weight of the i-th (0-based) item is item[i]. She wants to put all items into bins.
// 
// 
// The capacity of each bin is 300. She can put an arbitrary number of items into a single bin, but the total weight of items in a bin must be less than or equal to 300.
// 
// 
// You are given the vector <int> item. It is known that the weight of each item is between 101 and 300, inclusive. Return the minimal number of bins required to store all items.
// 
// DEFINITION
// Class:BinPackingEasy
// Method:minBins
// Parameters:vector <int>
// Returns:int
// Method signature:int minBins(vector <int> item)
// 
// 
// CONSTRAINTS
// -item will contain between 1 and 50 elements, inclusive.
// -Each element of item will be between 101 and 300, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {150, 150, 150, 150, 150}
// 
// Returns: 3
// 
// You have five items and each bin can hold at most two of them. You need at least three bins.
// 
// 1)
// {130, 140, 150, 160}
// 
// Returns: 2
// 
// For example, you can distribute the items in the following way:
// 
// Bin 1: 130, 150
// Bin 2: 140, 160
// 
// 
// 
// 2)
// {101, 101, 101, 101, 101, 101, 101, 101, 101}
// 
// Returns: 5
// 
// 
// 
// 3)
// {101, 200, 101, 101, 101, 101, 200, 101, 200}
// 
// Returns: 6
// 
// 
// 
// 4)
// {123, 145, 167, 213, 245, 267, 289, 132, 154, 176, 198}
// 
// Returns: 8
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

