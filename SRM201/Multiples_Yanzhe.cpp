#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class Multiples {
public:
	int number(int min, int max, int factor) {
		cout << -1 / 3 << endl;
		int begin = (min % factor == 0) ? (min / factor) : (min / factor + (min > 0));
		int end = (max % factor == 0) ? (max / factor) : (max / factor - (max < 0));
		return end - begin + 1;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	Multiples *obj;
	int answer;
	obj = new Multiples();
	clock_t startTime = clock();
	answer = obj->number(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = 0;
	p1 = 14;
	p2 = 5;
	p3 = 3;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 7;
	p1 = 24;
	p2 = 3;
	p3 = 6;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = -123456;
	p1 = 654321;
	p2 = 997;
	p3 = 780;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = -75312;
	p1 = 407891;
	p2 = 14;
	p3 = 34515;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// You are to create a class Multiples with a method number, which takes three ints: min, max, and factor.
// 
// 
// 
// Given a range of integers from min to max (inclusive), determine how many numbers within that range are evenly divisible by factor.
// 
// 
// DEFINITION
// Class:Multiples
// Method:number
// Parameters:int, int, int
// Returns:int
// Method signature:int number(int min, int max, int factor)
// 
// 
// NOTES
// -If x is evenly divisble by y, there exists some integer k such that k * y = x.
// 
// 
// CONSTRAINTS
// -min will be between -1000000 and 1000000, inclusive.
// -max will be between -1000000 and 1000000, inclusive.
// -max will be greater than or equal to min.
// -factor will be between 1 and 1000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 0
// 14
// 5
// 
// Returns: 3
// 
// The numbers 0, 5, and 10 are evenly divisible by 5, so this returns 3.
// 
// 1)
// 7
// 24
// 3
// 
// Returns: 6
// 
// The numbers 9, 12, 15, 18, 21, 24 are evenly divisible by 3, so this returns 6.
// 
// 
// 2)
// -123456
// 654321
// 997
// 
// Returns: 780
// 
// 3)
// -75312
// 407891
// 14
// 
// Returns: 34515
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
