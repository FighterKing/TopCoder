#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class InequalityChecker {
public:
	vector <int> getDifferences(int n) {
		int r = n * n;
		if (r % 4 == 0) return vector<int> { r / 4, 1 };
		if (r % 2 == 0) return vector<int> { r / 2, 2 };
		return vector<int> { r, 4 };
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, vector <int> p1) {
	cout << "Test " << testNum << ": [" << p0;
	cout << "]" << endl;
	InequalityChecker *obj;
	vector <int> answer;
	obj = new InequalityChecker();
	clock_t startTime = clock();
	answer = obj->getDifferences(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p1[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	vector <int> p1;
	
	{
	// ----- test 0 -----
	p0 = 2;
	int t1[] = {1,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3;
	int t1[] = {9,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 100;
	int t1[] = {2500,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Using mathematical induction it is possible to prove the following inequality when n>1:
// 	s = 13 + 23 + ... + (n-1)3 < n4/4 < 13 + 23 + ... + n3 = S
//   Given n return (S+s)/2 - n4/4 as a vector <int> with 2 elements.  Elements 0 and 1 denote the numerator and denominator of the return value, respectively, when written in least terms (reduced).
// 
// DEFINITION
// Class:InequalityChecker
// Method:getDifferences
// Parameters:int
// Returns:vector <int>
// Method signature:vector <int> getDifferences(int n)
// 
// 
// CONSTRAINTS
// -n will be between 2 and 100 inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 2
// 
// Returns: { 1,  1 }
// 
// We have 
// s = 1^3 = 1
// S = 1^3 + 2^3 = 9
// (S+s)/2 = (1+9)/2 = 5
// n^4/4 = 16/4 = 4 
// Since 5-4 = 1, we return the fraction 1/1.
// 
// 1)
// 3
// 
// Returns: { 9,  4 }
// 
// We have 
// s = 1^3 + 2^3 = 9
// S = 1^3 + 2^3 + 3^3 = 36
// (S+s)/2 = 45/2
// n^4/4 = 81/4
// We return the fraction 9/4.
// 
// 2)
// 100
// 
// Returns: { 2500,  1 }
// 
// Largest case.
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
