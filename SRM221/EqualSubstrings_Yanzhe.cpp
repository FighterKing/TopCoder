#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class EqualSubstrings {
public:
	vector <string> getSubstrings(string str) {
		int xlen = 0;
		int xa = 0, xb = 0;
		for (auto c : str)
			if (c == 'b') xb++;
		for (int i = 0; i < str.size(); i++) {
			if (str[i] == 'a')
				xa++;
			if (str[i] == 'b')
				xb--;
			if (xa == xb)
				xlen = i + 1;
		}
		return vector<string> {str.substr(0, xlen), str.substr(xlen)};
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, vector <string> p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	EqualSubstrings *obj;
	vector <string> answer;
	obj = new EqualSubstrings();
	clock_t startTime = clock();
	answer = obj->getSubstrings(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p1[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	vector <string> p1;
	
	{
	// ----- test 0 -----
	p0 = "aaabbb";
	string t1[] = {"aaa","bbb"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "bbbaaa";
	string t1[] = {"bbb","aaa"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "bbbbbb";
	string t1[] = {"bbbbbb",""};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "aaaaaa";
	string t1[] = {"","aaaaaa"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "abjlkbjalkbjaljsbljbalb";
	string t1[] = {"abjlkbjalkbjaljs","bljbalb"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You will be given a string str consisting of lowercase letters.  You will return a vector <string> containing elements x and y in that order.  The returned strings x and y must satisfy:
// 
// 1) The string xy (x with y concatenated on the end) must equal str.
// 2) The number of a's in x must equal the number of b's in y.
// 3) If multiple solutions are possible, use the one that maximizes the length of x.
//   See the examples for further clarifications.
// 
// DEFINITION
// Class:EqualSubstrings
// Method:getSubstrings
// Parameters:string
// Returns:vector <string>
// Method signature:vector <string> getSubstrings(string str)
// 
// 
// CONSTRAINTS
// -str will contain between 1 and 50 characters inclusive.
// -Each character in str will be a lowercase letter ('a'-'z').
// 
// 
// EXAMPLES
// 
// 0)
// "aaabbb"
// 
// Returns: { "aaa",  "bbb" }
// 
// Here we can split str right down the center.
// 
// 1)
// "bbbaaa"
// 
// Returns: { "bbb",  "aaa" }
// 
// Again the center works.
// 
// 2)
// "bbbbbb"
// 
// Returns: { "bbbbbb",  "" }
// 
// y can be empty.
// 
// 3)
// "aaaaaa"
// 
// Returns: { "",  "aaaaaa" }
// 
// x can be empty.
// 
// 4)
// "abjlkbjalkbjaljsbljbalb"
// 
// Returns: { "abjlkbjalkbjaljs",  "bljbalb" }
// 
// Make sure to maximize the length of x.
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
