#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class EvenRoute {
public:
  string isItPossible(vector <int> x, vector <int> y, int wantedParity) {
    int n = x.size();
    // f[i, j]: 0-even, 1-odd, 2-even or odd
    // the first i + 1 number of (x,y) and ending with the jth (x, y)
    // for example f[n - 1, n - 1]: the parity of walking through all the n pairs of (x, y),
    // and ending with the last pair(x,y)
    vector< vector<int>> f(n, vector<int>(n, -1));
    for (int i = 0; i < n; ++i) {
      f[0][i] = (abs(x[i]) + abs(y[i])) % 2;
    }
    for (int i = 1; i < n; ++i) {
      for (int j = 0; j < n; ++j) {
        for (int z = 0; z < n; ++z) {
          int distance = (abs(x[i] - x[i - 1]) + abs(y[i] - y[i - 1])) % 2;
          int com = (distance + f[i - 1][z]) % 2;
          if (f[i][j] == -1)
            f[i][j] = com;
          else if (f[i][j] != com) {
            f[i][j] = 2;
            return "CAN";
          }
        }
      }
    }

    for (int i = 0; i < n; ++i) {
      if (f[n - 1][i] == wantedParity)
        return "CAN";
    }
    return "CANNOT";
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, int p2, bool hasAnswer, string p3) {
  cout << "Test " << testNum << ": [" << "{";
  for (int i = 0; int(p0.size()) > i; ++i) {
    if (i > 0) {
      cout << ",";
    }
    cout << p0[i];
  }
  cout << "}" << "," << "{";
  for (int i = 0; int(p1.size()) > i; ++i) {
    if (i > 0) {
      cout << ",";
    }
    cout << p1[i];
  }
  cout << "}" << "," << p2;
  cout << "]" << endl;
  EvenRoute *obj;
  string answer;
  obj = new EvenRoute();
  clock_t startTime = clock();
  answer = obj->isItPossible(p0, p1, p2);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << "\"" << p3 << "\"" << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << "\"" << answer << "\"" << endl;
  if (hasAnswer) {
    res = answer == p3;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  } else if (hasAnswer) {
    cout << "Match :-)" << endl;
  } else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}
int main() {
  bool all_right;
  all_right = true;

  vector <int> p0;
  vector <int> p1;
  int p2;
  string p3;

  {
    // ----- test 0 -----
    int t0[] = {0};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {2};
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 1;
    p3 = "CANNOT";
    all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
    // ------------------
  }

  {
    // ----- test 1 -----
    int t0[] = {-5,-3,2};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {2,0,3};
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 1;
    p3 = "CAN";
    all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
    // ------------------
  }

  {
    // ----- test 2 -----
    int t0[] = {1001,-4000};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {0,0};
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 1;
    p3 = "CAN";
    all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
    // ------------------
  }

  {
    // ----- test 3 -----
    int t0[] = {11,21,0};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {-20,42,7};
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 0;
    p3 = "CANNOT";
    all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
    // ------------------
  }

  {
    // ----- test 4 -----
    int t0[] = {0,6};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {10,-20};
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 1;
    p3 = "CANNOT";
    all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
    // ------------------
  }

  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  } else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// PROBLEM STATEMENT
// Fox Ciel has stumbled upon a new problem: In this problem you will
// visit some points with integer coordinates in the Cartesian plane.
// Initially, you are located at the point (0,0). In each step, you
// can move from your current point to one of the four directly
// adjacent points.
// I.e., if you are at (x,y), you can move to one of the points
// (x,y+1), (x,y-1), (x+1,y), and (x-1,y).
// 
// You are given two vector <int>s x and y, each containing N
// elements.
// Together, x and y describe N distinct points in the Cartesian
// plane:
// for 0 <= i < N, point i has the coordinates (x[i],y[i]).
// 
// The goal is to find a sequence of steps that satisfies the
// following criteria:
// The starting point is (0,0).
// The sequence visits each of the N given points at least once.
// The sequence finishes in one of the given points.
// 
// 
// Mr. K claims to have solved this problem but Ciel does not believe
// him. Ciel has prepared a method to verify Mr. K's claims. Given an
// int wantedParity, the parity of the number of steps in the sequence
// found by Mr. K, Ciel will find if it is possible to find a sequence
// that follows the previously mentioned conditions and a new one:
// 
// The parity of the total number of steps is wantedParity. In other
// words, if wantedParity=0 then the total number of steps must be
// even, and if wantedParity=1 then the total number of steps must be
// odd.
// 
// 
// Return "CAN" (quotes for clarity) if at least one such sequence of
// steps exists, and "CANNOT" otherwise.
// 
// DEFINITION
// Class:EvenRoute
// Method:isItPossible
// Parameters:vector <int>, vector <int>, int
// Returns:string
// Method signature:string isItPossible(vector <int> x, vector <int>
// y, int wantedParity)
// 
// 
// CONSTRAINTS
// -wantedParity will be 0 or 1.
// -x will contain between 1 and 50 elements, inclusive.
// -y will contain the same number of elements as x.
// -Each element of x and y will be between -1000000 and 1000000,
// inclusive.
// -No point in the input will be equal to (0,0).
// -No pair of points in the input will be equal.
// 
// 
// EXAMPLES
// 
// 0)
// {-1,-1,1,1}
// {-1,1,1,-1}
// 0
// 
// Returns: "CAN"
// 
// A possible sequence containing an even number of steps:
// 2 steps: (0,0) -> (-1,-1).
// 2 steps: (-1,-1) -> (-1,1).
// 2 steps: (-1,1) -> (1,1).
// 2 steps: (1,1) -> (1,-1).
// 
// 
// 1)
// {-5,-3,2}
// {2,0,3}
// 1
// 
// Returns: "CAN"
// 
// A possible sequence containing an odd number of steps:
// 
// 7 steps: (0,0) -> (-5,2).
// 4 steps: (-5,2) -> (-3,0).
// 8 steps: (-3,0) -> (2,3).
// 
// 
// 
// 2)
// {1001, -4000}
// {0,0}
// 1
// 
// Returns: "CAN"
// 
// The shortest sequence that visits all the given points is the
// sequence that first goes to (1001,0) and then to (-4000,0).
// Note that this sequence does not have an odd amount of steps.
// However, there is a longer sequence with an odd number of steps:
// (0,0) -> (-4000,0) -> (1001, 0).
// 
// 3)
// {11, 21, 0}
// {-20, 42, 7}
// 0
// 
// Returns: "CANNOT"
// 
// 
// 
// 4)
// {0, 6}
// {10, -20}
// 1
// 
// Returns: "CANNOT"
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
