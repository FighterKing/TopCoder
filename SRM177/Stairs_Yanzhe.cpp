#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class Stairs {
public:
	int designs(int maxHeight, int minWidth, int totalHeight, int totalWidth) {
		int ret = 0;
		for (int i = totalWidth / minWidth; i >= 1; i--) {
			if (totalWidth % i == 0 &&
				totalHeight % (i + 1) == 0 &&
				totalHeight / (i + 1) <= maxHeight)
				ret++;
		}
		return ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	Stairs *obj;
	int answer;
	obj = new Stairs();
	clock_t startTime = clock();
	answer = obj->designs(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	
	{
	// ----- test 0 -----
	p0 = 22;
	p1 = 25;
	p2 = 100;
	p3 = 100;
	p4 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 25;
	p1 = 25;
	p2 = 60;
	p3 = 100;
	p4 = 2;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 1000;
	p1 = 1;
	p2 = 600;
	p3 = 600;
	p4 = 6;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// A set of stairs consists of risers (the vertical parts of the stairs) and
// treads (the horizontal parts that you walk on).  The stairs alternate
// treads and risers, starting and ending with a riser as shown below.
// 
// A set of stairs with two treads would have three risers and would look 
// similar to this picture:
// 
//                 +........
//                 |
//             +---+
//             |
//         +---+
//         |
// ........+
// 
// 
// We have the following 
// requirements for a set of stairs: 
// 
//     all risers must have the same integer height
//     all treads must have the same integer width
//     each riser must be less than or equal to maxHeight
//     each tread must be greater than or equal to minWidth
// 
// The totalWidth of the stairs is the sum of all the tread widths, while the
// totalHeight of the stairs is the sum of all the riser heights.  The stairs start
// with a riser and end with a riser.
// 
// Create a class Stairs that contains a method designs that takes as input four
// ints:  maxHeight, minWidth, totalHeight, totalWidth. It returns the number
// of different designs that meet the design criteria.
// 
// 
// 
// 
// DEFINITION
// Class:Stairs
// Method:designs
// Parameters:int, int, int, int
// Returns:int
// Method signature:int designs(int maxHeight, int minWidth, int totalHeight, int totalWidth)
// 
// 
// CONSTRAINTS
// -maxHeight, minWidth, totalHeight, and totalWidth will be between 1 and 1000 inclusive
// 
// 
// EXAMPLES
// 
// 0)
// 22
// 25
// 100
// 100
// 
// Returns: 1
// 
// 
// 
//    The only design is to have each riser be 20, each tread be 25.
//    
// 
// 1)
// 25
// 25
// 60
// 100
// 
// Returns: 2
// 
// 
// 
//    We could have riser height 12 with tread width 25, or we could have
//    riser height 20, tread width 50. The design with just
//    one tread of width 100 would force each riser to be 30 which exceeds the
//    specified maxHeight, and a design with 6 risers of height 10 would 
//    result in treads of width 20 which is smaller than the specified minWidth.
// 
// 2)
// 1000
// 1
// 600
// 600
// 
// Returns: 6
// 
// There are six different designs. The one with the biggest steps has just one tread of size 600, and two risers of size 300. The one with the smallest steps has 24 treads, each of width 25, and its 25 risers each have a height of 24.
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
