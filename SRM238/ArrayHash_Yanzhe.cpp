#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class ArrayHash {
public:
	int getHash(vector <string> input) {
		int ret = 0;
		for (int i = 0; i < input.size(); i++) {
			for (auto c : input[i])
				ret += c - 'A';
			ret += (input[i].size()-1) * input[i].size() / 2;
			ret += input[i].size() * i;
		}
		return ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	ArrayHash *obj;
	int answer;
	obj = new ArrayHash();
	clock_t startTime = clock();
	answer = obj->getHash(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"CBA","DDD"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 21;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"Z"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 25;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"A","B","C","D","E","F"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 30;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"ABCDEFGHIJKLMNOPQRSTUVWXYZ","ABCDEFGHIJKLMNOPQRSTUVWXYZ","ABCDEFGHIJKLMNOPQRSTUVWXYZ","ABCDEFGHIJKLMNOPQRSTUVWXYZ","ABCDEFGHIJKLMNOPQRSTUVWXYZ","ABCDEFGHIJKLMNOPQRSTUVWXYZ"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4290;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"ZZZZZZZZZZ"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 295;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You will be given a vector <string> input.  The value of each character in input is computed as follows:
//    Value = (Alphabet Position) + (Element of input) + (Position in Element) 
// 
// All positions are 0-based.  'A' has alphabet position 0, 'B' has alphabet position 1, ... The returned hash is the sum of all character values in input. 
// For example, if 
// input = {"CBA",
//          "DDD"}
// then each character value would be computed as follows: 
// 2 =   2 + 0 + 0   :  'C' in element 0 position 0
// 2 =   1 + 0 + 1   :  'B' in element 0 position 1
// 2 =   0 + 0 + 2   :  'A' in element 0 position 2
// 4  =  3 + 1 + 0   :  'D' in element 1 position 0
// 5  =  3 + 1 + 1   :  'D' in element 1 position 1
// 6  =  3 + 1 + 2   :  'D' in element 1 position 2
//  The final hash would be 2+2+2+4+5+6 = 21.
// 
// DEFINITION
// Class:ArrayHash
// Method:getHash
// Parameters:vector <string>
// Returns:int
// Method signature:int getHash(vector <string> input)
// 
// 
// CONSTRAINTS
// -input will contain between 1 and 50 elements inclusive.
// -Each character in each element of input will be a capital letter ('A'-'Z').
// -Each element of input will contain between 1 and 50 characters inclusive.
// -Each element of input will contain the same number of characters.
// 
// 
// EXAMPLES
// 
// 0)
// {"CBA",
//  "DDD"}
// 
// Returns: 21
// 
// From the problem statement.
// 
// 1)
// {"Z"}
// 
// Returns: 25
// 
// A very small example.
// 
// 2)
// {"A",
//  "B",
//  "C",
//  "D",
//  "E",
//  "F"}
// 
// Returns: 30
// 
// Tall and narrow.
// 
// 3)
// {"ABCDEFGHIJKLMNOPQRSTUVWXYZ",
//  "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
//  "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
//  "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
//  "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
//  "ABCDEFGHIJKLMNOPQRSTUVWXYZ"}
// 
// 
// Returns: 4290
// 
// 4)
// {"ZZZZZZZZZZ"}
// 
// Returns: 295
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
