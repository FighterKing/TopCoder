#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <climits>

using namespace std;


class HammingDistance {
private:
	int hammingDis(const string &a, const string &b) {
		int ret = 0;
		for (int i = 0; i < a.size(); i++)
			if (a[i] != b[i]) ret++;
		return ret;
	}
public:
	int minDistance(vector <string> numbers) {
		int ret = INT_MAX;
		for (int i = 0; i < numbers.size(); i++) {
			for (int j = i + 1; j < numbers.size(); j++) {
				int d = hammingDis(numbers[i], numbers[j]);
				if (d < ret)
					ret = d;
			}
		}
		return ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	HammingDistance *obj;
	int answer;
	obj = new HammingDistance();
	clock_t startTime = clock();
	answer = obj->minDistance(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"11010","01100"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"00","01","10","11"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"000","011","101","110"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"01100","01100","10011"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"00000000000000000000000000000000000000000000000000","11111111111111111111111111111111111111111111111111"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 50;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"000000","000111","111000","111111"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// The Hamming distance between two numbers is defined as the
// number of positions in their binary representations at which they
// differ (leading zeros are used if necessary to make the binary
// representations have the same length) - e.g., the numbers "11010"
// and "01100" differ at the first, third and fourth positions, so
// they have a Hamming distance of 3.
// 
// 
// You will be given a vector <string> numbers containing
// the binary representations of some numbers (all having the same
// length). You are to return the minimum among the Hamming distances
// of all pairs of the given numbers.
// 
// 
// 
// DEFINITION
// Class:HammingDistance
// Method:minDistance
// Parameters:vector <string>
// Returns:int
// Method signature:int minDistance(vector <string> numbers)
// 
// 
// CONSTRAINTS
// -numbers will have between 2 and 50 elements, inclusive.
// -Each element of numbers will have between 1 and 50 characters, inclusive.
// -All elements of numbers will have the same number of characters.
// -All elements of numbers will only contain the characters '0' and '1'.
// 
// 
// EXAMPLES
// 
// 0)
// {"11010", "01100"}
// 
// Returns: 3
// 
// 
// The example from the problem statement.
// 
// 
// 1)
// {"00", "01", "10", "11"}
// 
// Returns: 1
// 
// 
// A binary code that uses all possible codewords has minimum Hamming distance 1.
// 
// 
// 2)
// {"000", "011", "101", "110"}
// 
// Returns: 2
// 
// 
// Adding a "parity bit" to the binary numbers of example 1 increases the minimum 
// Hamming distance to 2.
// 
// 
// 
// 3)
// {"01100", "01100", "10011"}
// 
// Returns: 0
// 
// 
// Note that the input may contain identical numbers (Hamming distance 0).
// 
// 
// 
// 4)
// {"00000000000000000000000000000000000000000000000000",
// "11111111111111111111111111111111111111111111111111"}
// 
// Returns: 50
// 
// 5)
// {"000000", "000111", "111000", "111111"}
// 
// Returns: 3
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
