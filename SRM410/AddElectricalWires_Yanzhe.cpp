#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class AddElectricalWires {
private:
	vector<int> id;
	vector<int> sz;
	int count;
	void uf_init(int N) {
		count = N;
		id.resize(N);
		sz.resize(N, 1);
		for (int i = 0; i < N; i++)
			id[i] = i;
	}
	int uf_find(int p) {
		while (p != id[p])
			p = id[p];
		return p;
	}
	bool uf_connected(int p, int q) {
		return uf_find(p) == uf_find(q);
	}
	void uf_union(int p, int q) {
		int rootP = uf_find(p);
		int rootQ = uf_find(q);
		if (rootP == rootQ) return;
		if (sz[rootQ] < sz[rootP]) {
			id[rootP] = rootQ;
			sz[rootQ] += sz[rootP];
			sz[rootP] = -1;
		} else {
			id[rootQ] = rootP;
			sz[rootP] += sz[rootQ];
			sz[rootQ] = -1;
		}
		count--;
	}
public:
	int maxNewWires(vector <string> wires, vector <int> gridConnections) {
		int N = wires.size();
		uf_init(N);
		int E = 0;
		for (int i = 0; i < N; i++)
			for (int j = 0; j < N; j++)
				if (wires[i][j] == '1') {
					uf_union(i, j);
					E++;
				}
		int ret = 0;
		if (count > gridConnections.size()) {
			int maxg = -1;
			int standalone = N;
			for (auto i : gridConnections) {
				int _t = sz[uf_find(i)];
				ret += _t * (_t - 1) / 2;
				maxg = max(maxg, _t);
				standalone -= _t;
			}
			ret -= maxg * (maxg - 1) / 2;
			ret += (maxg + standalone) * (maxg + standalone - 1) / 2;
		} else {
			for (auto n : sz) {
				if (n != -1)
					ret += n * (n - 1) / 2;
			}
		}
		return ret - E / 2;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	AddElectricalWires *obj;
	int answer;
	obj = new AddElectricalWires();
	clock_t startTime = clock();
	answer = obj->maxNewWires(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <int> p1;
	int p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"000","000","000"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"000","000","000"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"01","10"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"00000","00000","00000","00000","00000"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,1,2,3,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"01000","10100","01010","00100","00000"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You are given an electrical circuit for a home, with a number of nodes possibly connected by wires.  Any pair of nodes may be connected by at most one wire, and a node can't be connected to itself.  Each node on the circuit is either an electrical outlet for the house or a connection to the main electrical grid.  The vector <string> wires tells you the wires that are already in place; the xth character of the yth element is '1' (one) if nodes x and y have a wire between them, '0' (zero) otherwise.  The vector <int> gridConnections lists the indices of the nodes that are connections to the main electrical grid.
// 
// You'd like to make the circuit safer and more redundant by adding as many extra wires to it as possible.  The one complication is that no two main grid connections are currently wired together (directly or indirectly), and you must preserve this, or else disaster will result.  Determine the maximum number of new wires you can add to the circuit.
// 
// DEFINITION
// Class:AddElectricalWires
// Method:maxNewWires
// Parameters:vector <string>, vector <int>
// Returns:int
// Method signature:int maxNewWires(vector <string> wires, vector <int> gridConnections)
// 
// 
// CONSTRAINTS
// -wires will contain between 1 and 50 elements, inclusive.
// -Each element of wires will have the same length as wires.
// -Each element of wires will contain only the characters '0' and '1'.
// -Character i of element i of wires will be a '0'.
// -Character i of element j of wires will be the same as character j of element i.
// -gridConnections will contain between 1 and 50 elements, inclusive.
// -Each element of gridConnections will be an integer between 0 and length(wires)-1, inclusive.
// -Each element of gridConnections will be distinct.
// -Each pair of elements of gridConnections will not index nodes connected by a path of '1's in wires.
// 
// 
// EXAMPLES
// 
// 0)
// {"000","000","000"}
// {0}
// 
// Returns: 3
// 
// Every valid wire can be added.
// 
// 1)
// {"000","000","000"}
// {0,1}
// 
// Returns: 1
// 
// 0 and 1 can't be connected, but 0 and 2 (or 1 and 2) still can be.
// 
// 2)
// {"01","10"}
// {0}
// 
// Returns: 0
// 
// This circuit is already complete.
// 
// 3)
// {"00000","00000","00000","00000","00000"}
// {0,1,2,3,4}
// 
// Returns: 0
// 
// Any connections would be disastrous.
// 
// 4)
// {"01000","10100","01010","00100","00000"}
// {2,4}
// 
// Returns: 3
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
