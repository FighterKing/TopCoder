#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class CompetitionStatistics {
public:
	int consecutiveGrowth(vector <int> ratingChanges) {
		enum STATE { IN, OUT };
		STATE s = OUT;
		int ret = 0, cnt = 0;
		for (auto r : ratingChanges) {
			switch(s) {
			case IN:
				if (r > 0) cnt++;
				else {
					s = OUT;
					if (cnt > ret) ret = cnt;
					cnt = 0;
				}
				break;
			case OUT:
				if (r > 0) {
					s = IN;
					cnt++;
				}
				break;
			}
		}
		return (ret > cnt) ? ret : cnt;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	CompetitionStatistics *obj;
	int answer;
	obj = new CompetitionStatistics();
	clock_t startTime = clock();
	answer = obj->consecutiveGrowth(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	
	{
	// ----- test 0 -----
	int t0[] = {30,5,-5,3,3,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {-1,-5,-9};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {12,0,15,73};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {12,1,15,73};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {-6,13,15,-11,12,12,33,12,-1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// The longest consecutive rating increase streak is a very important statistic in any competition. You are to calculate this statistic for a certain player.
// You will be given a vector <int> ratingChanges containing the rating changes of the player in chronological order. Your method should return the maximum number of consecutive competitions with positive rating changes. Note that 0 is not a positive number.
// 
// 
// DEFINITION
// Class:CompetitionStatistics
// Method:consecutiveGrowth
// Parameters:vector <int>
// Returns:int
// Method signature:int consecutiveGrowth(vector <int> ratingChanges)
// 
// 
// CONSTRAINTS
// -ratingChanges will contain between 1 and 50 elements, inclusive.
// -Each element of ratingChanges will be between -1000 and 1000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {30, 5, -5, 3, 3, 1}
// 
// Returns: 3
// 
// The player raises rating two times, afterwards reduces it once and finally raises it three times in a row.
// 
// 1)
// {-1, -5, -9}
// 
// Returns: 0
// 
// No rating changes are positive.
// 
// 2)
// {12, 0, 15, 73}
// 
// Returns: 2
// 
// 3)
// {12, 1, 15, 73}
// 
// Returns: 4
// 
// 4)
// {-6, 13, 15, -11, 12, 12, 33, 12, -1}
// 
// Returns: 4
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
