#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class FoxAndVacation {
public:
  int maxCities(int total, vector <int> d) {
    int count = 0;
    sort(d.begin(), d.end());
    for (auto i : d) {
      if (total >= i) {
        ++count;
        total -= i;
      } else {
        break;
      }
    }
    return count;        
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, bool hasAnswer, int p2) {
  cout << "Test " << testNum << ": [" << p0 << "," << "{";
  for (int i = 0; int(p1.size()) > i; ++i) {
    if (i > 0) {
      cout << ",";
    }
    cout << p1[i];
  }
  cout << "}";
  cout << "]" << endl;
  FoxAndVacation *obj;
  int answer;
  obj = new FoxAndVacation();
  clock_t startTime = clock();
  answer = obj->maxCities(p0, p1);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << p2 << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << answer << endl;
  if (hasAnswer) {
    res = answer == p2;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  } else if (hasAnswer) {
    cout << "Match :-)" << endl;
  } else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}
int main() {
  bool all_right;
  all_right = true;
	
  int p0;
  vector <int> p1;
  int p2;
	
  {
    // ----- test 0 -----
    p0 = 5;
    int t1[] = {2,2,2};
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 2;
    all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  {
    // ----- test 1 -----
    p0 = 5;
    int t1[] = {5,6,1};
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 1;
    all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  {
    // ----- test 2 -----
    p0 = 5;
    int t1[] = {6,6,6};
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 0;
    all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  {
    // ----- test 3 -----
    p0 = 6;
    int t1[] = {1,1,1,1,1};
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 5;
    all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  {
    // ----- test 4 -----
    p0 = 10;
    int t1[] = {7,1,5,6,1,3,4};
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 4;
    all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  {
    // ----- test 5 -----
    p0 = 50;
    int t1[] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 9;
    all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  {
    // ----- test 6 -----
    p0 = 21;
    int t1[] = {14,2,16,9,9,5,5,23,25,20,8,25,6,12,3,2,4,5,10,14,19,12,25,15,14};
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 6;
    all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  } else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// PROBLEM STATEMENT
// Fox Ciel is planning to visit the Tourist Kingdom for total days.
// This kingdom is full of lovely cities.
// During her stay Ciel would like to visit as many different cities as possible.
// She cannot visit more than one city on the same day.
// 
// 
// 
// Additionally, different cities may require her to stay for a different number of days.
// For each i, city i only counts as visited if Ciel spends at least d[i] days in the city.
// 
// 
// 
// You are given the int total and the vector <int> d.
// Return the maximal number of cities she can visit during her vacation.
// 
// DEFINITION
// Class:FoxAndVacation
// Method:maxCities
// Parameters:int, vector <int>
// Returns:int
// Method signature:int maxCities(int total, vector <int> d)
// 
// 
// NOTES
// -When solving the task, ignore travel times. (Fox Ciel always travels at night, and she can travel between any two cities very quickly.)
// 
// 
// CONSTRAINTS
// -total will be between 1 and 50, inclusive.
// -d will contain between 1 and 50 elements, inclusive.
// -Each element of d will be between 1 and 50, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 5
// {2,2,2}
// 
// Returns: 2
// 
// Fox Ciel's vacation lasts for 5 days. She needs at least 2 days to visit each of the cities, so she can visit at most 2 of them.
// 
// 1)
// 5
// {5,6,1}
// 
// Returns: 1
// 
// She can only visit one city: either city 0, or city 2.
// 
// 2)
// 5
// {6,6,6}
// 
// Returns: 0
// 
// This time the poor Fox Ciel cannot visit any city during her summer vacation.
// 
// 3)
// 6
// {1,1,1,1,1}
// 
// Returns: 5
// 
// In this test case Ciel can visit all five cities.
// Note that at the end of her trip each city either does count as visited, or it does not -- there is no way to "visit" the same city twice.
// 
// 4)
// 10
// {7,1,5,6,1,3,4}
// 
// Returns: 4
// 
// 
// 
// 5)
// 50
// {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}
// 
// Returns: 9
// 
// 
// 
// 6)
// 21
// {14,2,16,9,9,5,5,23,25,20,8,25,6,12,3,2,4,5,10,14,19,12,25,15,14}
// 
// Returns: 6
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

