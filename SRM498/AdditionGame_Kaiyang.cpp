#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class AdditionGame {
  int maxest(int &A, int &B, int &C) {
    int minValue = -1;
    if (A >= B && A >= C) {
      minValue = A;
      --A;
    }  else if (B >= A && B >= C) {
      minValue = B;
      --B;
    } else {
      minValue = C;
      --C;
    }
    return minValue;
  }
public:
  int getMaximumPoints(int A, int B, int C, int N) {
    int maxPoints = 0;
    for (int i = 0; i < N; ++i) {
      int t = maxest(A, B, C);
      if (0 == t)
        break;
      maxPoints += t;
    }
    return maxPoints;
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, bool hasAnswer, int p4) {
  cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
  cout << "]" << endl;
  AdditionGame *obj;
  int answer;
  obj = new AdditionGame();
  clock_t startTime = clock();
  answer = obj->getMaximumPoints(p0, p1, p2, p3);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << p4 << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << answer << endl;
  if (hasAnswer) {
    res = answer == p4;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  } else if (hasAnswer) {
    cout << "Match :-)" << endl;
  } else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}
int main() {
  bool all_right;
  all_right = true;
	
  int p0;
  int p1;
  int p2;
  int p3;
  int p4;
	
  {
    // ----- test 0 -----
    p0 = 3;
    p1 = 4;
    p2 = 5;
    p3 = 3;
    p4 = 13;
    all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------
  }
	
  {
    // ----- test 1 -----
    p0 = 1;
    p1 = 1;
    p2 = 1;
    p3 = 8;
    p4 = 3;
    all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------
  }
	
  {
    // ----- test 2 -----
    p0 = 3;
    p1 = 5;
    p2 = 48;
    p3 = 40;
    p4 = 1140;
    all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------
  }
	
  {
    // ----- test 3 -----
    p0 = 36;
    p1 = 36;
    p2 = 36;
    p3 = 13;
    p4 = 446;
    all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------
  }
	
  {
    // ----- test 4 -----
    p0 = 8;
    p1 = 2;
    p2 = 6;
    p3 = 13;
    p4 = 57;
    all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------
  }
	
  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  } else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// PROBLEM STATEMENT
// Fox Ciel is playing a game called Addition Game.
// 
// Three numbers A, B and C are written on a blackboard, and Ciel initially has 0 points. She repeats the following operation exactly N times: She chooses one of the three numbers on the blackboard. Let X be the chosen number. She gains X points, and if X >= 1, the number X on the blackboard becomes X-1. Otherwise, the number does not change.
// 
// Return the maximum number of points she can gain if she plays optimally.
// 
// 
// DEFINITION
// Class:AdditionGame
// Method:getMaximumPoints
// Parameters:int, int, int, int
// Returns:int
// Method signature:int getMaximumPoints(int A, int B, int C, int N)
// 
// 
// CONSTRAINTS
// -A, B and C will each be between 1 and 50, inclusive.
// -N will be between 1 and 150, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 3
// 4
// 5
// 3
// 
// Returns: 13
// 
// The three numbers written on the blackboard are (3, 4, 5).  One possible optimal strategy is as follows:
// 
// Ciel chooses 5.  She gains 5 points, and the numbers become (3, 4, 4).
// Ciel chooses 4.  She gains 4 points, and the numbers become (3, 3, 4).
// Ciel chooses 4.  She gains 4 points, and the numbers become (3, 3, 3).
// 
// She gains a total of 5+4+4=13 points.
// 
// 
// 1)
// 1
// 1
// 1
// 8
// 
// Returns: 3
// 
// One optimal strategy is to choose a 1 in each of the first three turns, for a total of 3 points.  The numbers then become (0, 0, 0).  After that, she won't be able to gain any more points.
// 
// 
// 2)
// 3
// 5
// 48
// 40
// 
// Returns: 1140
// 
// The only optimal strategy is to choose the following numbers: 48, 47, 46, ..., 11, 10, 9.
// 
// 
// 3)
// 36
// 36
// 36
// 13
// 
// Returns: 446
// 
// 
// 
// 4)
// 8
// 2
// 6
// 13
// 
// Returns: 57
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

