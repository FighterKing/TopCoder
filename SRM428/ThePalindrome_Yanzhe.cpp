#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class ThePalindrome {
private:
	bool check(int half, bool mid, string s) {
		int N = s.size();
		if (mid) {
			int i = 1;
			while (half + i < N) {
				if (s[half + i] != s[half - i])
					return false;
				i++;
			}
		} else {
			int i = 0;
			while (half + i < N) {
				if (s[half + i] != s[half - i - 1])
					return false;
				i++;
			}
		}
		return true;
	}
public:
	int find(string s) {
		int N = s.size();
		if (N % 2 == 0) {
			for (int i = N / 2; i < N - 1; i++) {
				if (check(i, false, s))
					return 2 * i;
				if (check(i, true, s))
					return 2 * i + 1;
			}
			if (check(N - 1, false, s))
				return 2 * N - 2;
		} else {
			if (check(N / 2, true, s))
				return N;
			for (int i = N / 2 + 1; i < N - 1; i++) {
				if (check(i, false, s))
					return 2 * i;
				if (check(i, true, s))
					return 2 * i + 1;
			}
			if (check(N - 1, false, s))
				return 2 * N - 2;
		}
		return 2 * N - 1;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	ThePalindrome *obj;
	int answer;
	obj = new ThePalindrome();
	clock_t startTime = clock();
	answer = obj->find(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = "abab";
	p1 = 5;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "abacaba";
	p1 = 7;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "qwerty";
	p1 = 11;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "abdfhdyrbdbsdfghjkllkjhgfds";
	p1 = 38;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// John and Brus are studying string theory at the university.  Brus likes palindromes very much.  A palindrome is a word that reads the same forward and backward.  John would like to surprise Brus by taking a string s, and appending 0 or more characters to the end of s to obtain a palindrome.  He wants that palindrome to be as short as possible.  Return the shortest possible length of a palindrome that John can generate.
// 
// DEFINITION
// Class:ThePalindrome
// Method:find
// Parameters:string
// Returns:int
// Method signature:int find(string s)
// 
// 
// CONSTRAINTS
// -s will contain between 1 and 50 characters, inclusive.
// -Each character of s will be a lowercase letter ('a' - 'z').
// 
// 
// EXAMPLES
// 
// 0)
// "abab"
// 
// Returns: 5
// 
// "ababa" is the shortest palindrome that John can get.
// 
// 1)
// "abacaba"
// 
// Returns: 7
// 
// Already a palindrome.
// 
// 2)
// "qwerty"
// 
// Returns: 11
// 
// All characters are different.
// 
// 3)
// "abdfhdyrbdbsdfghjkllkjhgfds"
// 
// Returns: 38
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
