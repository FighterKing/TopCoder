#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class FingerCounting {
public:
	int maxNumber(int weakFinger, int maxCount) {
		if (weakFinger == 1 || weakFinger == 5)
			return maxCount * 8 + weakFinger - 1;
		else
			return maxCount / 2 * 8 + ((maxCount % 2 == 0) ? (weakFinger - 1) : (9 - weakFinger));
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	FingerCounting *obj;
	int answer;
	obj = new FingerCounting();
	clock_t startTime = clock();
	answer = obj->maxNumber(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 3;
	p2 = 15;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 1;
	p1 = 0;
	p2 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 5;
	p1 = 0;
	p2 = 4;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 2;
	p1 = 48;
	p2 = 193;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 5;
	p1 = 973;
	p2 = 7788;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 3;
	p1 = 99999;
	p2 = 399998;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Your little son is counting numbers with his left hand.  Starting with his thumb and going toward his pinky, he counts each finger in order.  After counting his pinky, he reverses direction and goes back toward his thumb.  He repeats this process until he reaches his target number.  He never skips a finger.  For example, to count to ten, he would count: thumb, index, middle, ring, pinky, ring, middle, index, thumb, index.
// 
// Sadly, one of his fingers hurts and he can only count on it a limited number of times.  His fingers are numbered 1 through 5 from thumb to pinky.  You are given an int weakFinger, the finger that hurts, and an int maxCount, the maximum number of times he can use that finger.  Return the largest number he can count to.  If he cannot even begin counting, return 0.
// 
// DEFINITION
// Class:FingerCounting
// Method:maxNumber
// Parameters:int, int
// Returns:int
// Method signature:int maxNumber(int weakFinger, int maxCount)
// 
// 
// CONSTRAINTS
// -weakFinger will be between 1 and 5, inclusive.
// -maxCount will be between 0 and 100000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 2
// 3
// 
// Returns: 15
// 
// The first 15 numbers are counted with fingers 1,2,3,4,5,4,3,2,1,2,3,4,5,4,3. He would then have to use finger 2 for the next number, but since he has already used it 3 times, he has to stop.
// 
// 1)
// 1
// 0
// 
// Returns: 0
// 
// He needs to use his thumb when counting the first number, 1, but it's too weak to be used even once.
// 
// 2)
// 5
// 0
// 
// Returns: 4
// 
// Even though his pinky cannot be used at all, he can count 1,2,3,4 with the other fingers.
// 
// 3)
// 2
// 48
// 
// Returns: 193
// 
// 
// 
// 4)
// 5
// 973
// 
// Returns: 7788
// 
// 
// 
// 5)
// 3
// 99999
// 
// Returns: 399998
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
