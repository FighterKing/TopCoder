// Just Brute Force
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class FoxAndGomoku {
public:
  string win(vector <string> board) {
    int n = board.size();
    bool found = false;
    for (int i = 0; i < n && !found; ++i) {
      for (int j = 0; j < n; ++j) {
        if (board[i][j] == '.')
          continue;
        found = false;

        // horizontally
        int count = 1;
        int iDown = i + 1;
        while (iDown < n && board[iDown][j] == 'o') {
          ++iDown;
          ++count;
        }
        if (count >= 5) {
          found = true;
          break;
        }
        
        // vertically
        int jRight = j + 1;
        count = 1;
        while (jRight < n && board[i][jRight] == 'o') {
          ++jRight;
          ++count;
          }

        if (count >= 5) {
          found = true;
          break;
        }
        // right diagonally
        int iD = i + 1;
        int jD = j + 1;
        count = 1;
        while (iD < n && jD < n && board[iD][jD] == 'o') {
          ++count;
          ++iD;
          ++jD;
        }
        if (count >= 5) {
          found = true;
          break;
        }

        // left diagonally
        int iL = i + 1;
        int jL = j - 1;
        count = 1;
        while (iL < n && jL >= 0 && board[iL][jL] == 'o') {
          ++count;
          ++iL;
          --jL;
        }
        if (count >= 5) {
          found = true;
          break;
        }
 
      }
    }
    if (found) 
      return "found";
    return "not found";
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, string p1) {
  cout << "Test " << testNum << ": [" << "{";
  for (int i = 0; int(p0.size()) > i; ++i) {
    if (i > 0) {
      cout << ",";
    }
    cout << "\"" << p0[i] << "\"";
  }
  cout << "}";
  cout << "]" << endl;
  FoxAndGomoku *obj;
  string answer;
  obj = new FoxAndGomoku();
  clock_t startTime = clock();
  answer = obj->win(p0);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << "\"" << p1 << "\"" << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << "\"" << answer << "\"" << endl;
  if (hasAnswer) {
    res = answer == p1;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  } else if (hasAnswer) {
    cout << "Match :-)" << endl;
  } else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}
int main() {
  bool all_right;
  all_right = true;

  vector <string> p0;
  string p1;

  {
    // ----- test 0 -----
    string t0[] = {"....o.","...o..","..o...",".o....","o.....","......"};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = "found";
    all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
    // ------------------
  }

  {
    // ----- test 1 -----
    string t0[] = {"oooo.",".oooo","oooo.",".oooo","....."};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = "not found";
    all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
    // ------------------
  }

  {
    // ----- test 2 -----
    string t0[] = {"oooo.",".oooo","oooo.",".oooo","....o"};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = "found";
    all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    // ------------------
  }

  {
    // ----- test 3 -----
    string t0[] = {"o.....",".o....","..o...","...o..","....o.","......"};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = "found";
    all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
    // ------------------
  }

  {
    // ----- test 4 -----
    string t0[] = {"o....","o.o..","o.o.o","o.o..","o...."};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = "found";
    all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
    // ------------------
  }

  {
    // ----- test 5 -----
    string t0[] = {"..........","..........","..oooooo..","..o.......","..o.......","..oooooo..",".......o..",".......o..","..oooooo..",".........."};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = "found";
    all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
    // ------------------
  }

  {
    // ----- test 6 -----
    string t0[] = {"..........","..........","..oooo.o..","..o.......","..o.......","..o.oooo..",".......o..",".......o..","..oooo.o..",".........."};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = "not found";
    all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
    // ------------------
  }

  {
    // ----- test 7 -----
    string t0[] = {"ooooo","ooooo","ooooo","ooooo","ooooo"};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = "found";
    all_right = KawigiEdit_RunTest(7, p0, true, p1) && all_right;
    // ------------------
  }

  {
    // ----- test 8 -----
    string t0[] = {".....",".....",".....",".....","....."};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = "not found";
    all_right = KawigiEdit_RunTest(8, p0, true, p1) && all_right;
    // ------------------
  }

  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  } else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
