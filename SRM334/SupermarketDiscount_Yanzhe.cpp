#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class SupermarketDiscount {
public:
	int minAmount(vector <int> goods) {
		sort(goods.begin(), goods.end());
		int sp;
		for (sp = 0; sp < goods.size() && goods[sp] < 50; sp++) {}
		int groups = goods.size() - sp;
		int i, j;
		for (i = 0, j = sp - 1; i < j;) {
			int sum = goods[i] + goods[j];
			while (i + 1 < j && sum < 50)
				sum += goods[++i];
			if (sum >= 50)
				groups++;
			i++; j--;
		}
		return accumulate(goods.begin(), goods.end(), 0) - groups * 10;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	SupermarketDiscount *obj;
	int answer;
	obj = new SupermarketDiscount();
	clock_t startTime = clock();
	answer = obj->minAmount(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	
	{
	// ----- test 0 -----
	int t0[] = {46,62,9};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 97;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {50,62,93};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 175;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {5,31,15};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 41;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {5,3,15};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 23;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Three girls are shopping at a supermarket.  The supermarket is having a sale: "Spend $50 or more in a single transaction and get $10 off."  The girls realize that if they combine their purchases, they might be able to pay less than if they each pay separately.  For example, if they are buying a total of $46, $62 and $9 worth of goods, respectively, they can combine the $46 and $9 totals and make two purchase transactions ($55 and $62) to get $20 off.
// 
// You will be given a vector <int> goods, each element of which is the total cost of the goods purchased by one of the girls.  Return the minimal total cost required to purchase all the goods.  The girls are willing to combine their purchases as described above, but no girl is willing to split up her goods across multiple transactions.
// 
// DEFINITION
// Class:SupermarketDiscount
// Method:minAmount
// Parameters:vector <int>
// Returns:int
// Method signature:int minAmount(vector <int> goods)
// 
// 
// CONSTRAINTS
// -goods will contain exactly 3 elements. 
// -Each element of goods will be between 1 and 99, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {46, 62, 9}
// 
// Returns: 97
// 
// The example from the problem statement. 
// 
// 1)
// {50, 62, 93}
// 
// Returns: 175
// 
// The best decision is to pay separately. 
// 
// 2)
// {5, 31, 15}
// 
// Returns: 41
// 
// The only way to get the discount is to combine all three purchases into one transaction.
// 
// 
// 3)
// {5, 3, 15}
// 
// Returns: 23
// 
// The girls have no chance of getting the discount.
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
