#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class SkiResortsEasy {
public:
  int minCost(vector <int> altitude) {
    int sum = 0;
    int last = altitude[0];
    for (auto i : altitude) {
      if (last < i)
        sum += i - last;
      else
        last = i;
    }
    return sum;
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
  cout << "Test " << testNum << ": [" << "{";
  for (int i = 0; int(p0.size()) > i; ++i) {
    if (i > 0) {
      cout << ",";
    }
    cout << p0[i];
  }
  cout << "}";
  cout << "]" << endl;
  SkiResortsEasy *obj;
  int answer;
  obj = new SkiResortsEasy();
  clock_t startTime = clock();
  answer = obj->minCost(p0);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << p1 << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << answer << endl;
  if (hasAnswer) {
    res = answer == p1;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  } else if (hasAnswer) {
    cout << "Match :-)" << endl;
  } else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}
int main() {
  bool all_right;
  all_right = true;
	
  vector <int> p0;
  int p1;
	
  {
    // ----- test 0 -----
    int t0[] = {30,20,20,10};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 0;
    all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 1 -----
    int t0[] = {5,7,3};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 2;
    all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 2 -----
    int t0[] = {6,8,5,4,7,4,2,3,1};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 6;
    all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 3 -----
    int t0[] = {749,560,921,166,757,818,228,584,366,88};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 2284;
    all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 4 -----
    int t0[] = {712,745,230,200,648,440,115,913,627,621,186,222,741,954,581,193,266,320,798,745};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 6393;
    all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
    // ------------------
  }
	
  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  } else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// PROBLEM STATEMENT
// Fox Ciel is the owner of a ski resort. The ski resort has N places numbered 0 through N-1. You are given a vector <int> altitude. For each i, the i-th element of altitude is the altitude of the place i.
// 
// 
// The skiers would like to follow the path (place 0) -> (place 1) -> ... -> (place N-1). The trip will only be possible if the altitudes of the places are non-increasing. In order to make the trip possible, Ciel now needs to decrease the altitudes of some places. In other words, Ciel wants to decrease some of the altitudes so that altitude[0] >= altitude[1] >= ... >= altitude[N-1] holds. It costs 1 unit of money to decrease the altitude of one place by 1 unit of height.
// 
// 
// Return the minimal cost required for the change.
// 
// DEFINITION
// Class:SkiResortsEasy
// Method:minCost
// Parameters:vector <int>
// Returns:int
// Method signature:int minCost(vector <int> altitude)
// 
// 
// CONSTRAINTS
// -altitude will contain between 2 and 50 elements, inclusive.
// -Each element of altitude will be between 0 and 1,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {30, 20, 20, 10}
// 
// Returns: 0
// 
// The altitudes are already non-increasing, so Ciel doesn't need to change anything.
// 
// 1)
// {5, 7, 3}
// 
// Returns: 2
// 
// Ciel should change the altitude of place 1 (0-based index) from 7 to 5.
// This changes the sequence of altitudes to {5, 5, 3}.
// The cost of the change is 7 - 5 = 2 units of money.
// 
// 2)
// {6, 8, 5, 4, 7, 4, 2, 3, 1}
// 
// Returns: 6
// 
// Ciel should change the altitudes to {6, 6, 5, 4, 4, 4, 2, 2, 1}.
// 
// 3)
// {749, 560, 921, 166, 757, 818, 228, 584, 366, 88}
// 
// Returns: 2284
// 
// 
// 
// 4)
// {712, 745, 230, 200, 648, 440, 115, 913, 627, 621, 186, 222, 741, 954, 581, 193, 266, 320, 798, 745}
// 
// Returns: 6393
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

