// Same solution as tc. 
// Use Mathematical Induction to prove the correctness.
// first, throw away the N / 3 - 1 weakest elements.
// then combine strongest(a) and weakest(b) in the remaining.
// if (a + b > rank) go to 4; else combine a with second weakest(c)
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class TeamContestEasy {
public:
  int worstRank(vector <int> strength) {
    int com = strength[0] + strength[1] + strength[2] - *min_element(strength.begin(), strength.begin() + 3);
    sort(strength.rbegin() , strength.rend() - 3);
    vector<int> another(strength.begin() + 3, strength.end() - (strength.size() / 3 - 1));
    int i = 0, j = another.size() - 1;
    int count = 1;
    while (i < j) {
      while(i < j && another[i] + another[j] <= com)
        --j;
      if (i >= j)
        break;
      ++count;
      ++i;
      --j;
    }
    return count;
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
  cout << "Test " << testNum << ": [" << "{";
  for (int i = 0; int(p0.size()) > i; ++i) {
    if (i > 0) {
      cout << ",";
    }
    cout << p0[i];
  }
  cout << "}";
  cout << "]" << endl;
  TeamContestEasy *obj;
  int answer;
  obj = new TeamContestEasy();
  clock_t startTime = clock();
  answer = obj->worstRank(p0);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << p1 << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << answer << endl;
  if (hasAnswer) {
    res = answer == p1;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  } else if (hasAnswer) {
    cout << "Match :-)" << endl;
  } else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}
int main() {
  bool all_right;
  all_right = true;
	
  vector <int> p0;
  int p1;
	
  {
    // ----- test 0 -----
    int t0[] = {28481, 557292, 14188, 61649, 510253, 509530, 749211, 171570, 441589};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 3;
    all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 1 -----
    int t0[] = {5,7,3};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 1;
    all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 2 -----
    int t0[] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 1;
    all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 3 -----
    int t0[] = {2,2,1,1,3,1,3,2,1,3,1,2,1,2,1};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 4;
    all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 4 -----
    int t0[] = {45,72,10,42,67,51,33,21,8,51,17,72};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 3;
    all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 5 -----
    int t0[] = {570466,958327,816467,17,403,953808,734850,5824,917784,921731,161921,1734,823437,3218,81,932681,2704,981643,1232,475,873323,6558,45660,1813,4714,224,32301,28081,6728,17055,561,15146,842613,5559,1860,783,989,2811,20664,112531,1933,866794,805528,53821,2465,137385,39,2007};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 6;
    all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 6 -----
    int t0[] = {610297,849870,523999,6557,976530,731458,7404,795100,147040,110947,159692,40785,4949,2903,1688,37278,620703,28156,16823,1159,12132,971379,5916,1159,988589,12215,133,1490,911360,920059,544070,40249,514852,852,745070,1105,715897,714696,589133,698317,5683,631612,16453,101000,764881,101,2053,754661};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 10;
    all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
    // ------------------
  }
	
  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  } else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// PROBLEM STATEMENT
// Your university is holding a programming competition and your team is going to compete.
// 
// There are 3*N students in the university. They are numbered from 0 to 3*N-1. Each student has a certain strength which is a positive number that characterizes his/her programming skills. You are given a vector <int> strength. The strength of student i is equal to strength[i].
// 
// Your team will consist of students 0, 1 and 2. Other 3*N-3 students will form N-1 more teams so that each team has exactly 3 members. The exact composition of other teams is not known yet. Each team has a strength that is calculated as follows: if it consists of members with strengths X, Y and Z, then the team's strength is equal to X + Y + Z - min{X, Y, Z}, i.e., the strength of a team is the total strength of its two strongest members.
// 
// You are interested how your team will rank by strength among the other teams. Formally, the rank of your team is defined as 1 + (the number of other teams that have a strictly greater strength than the strength of your team).
// 
// Return the maximum possible rank that your team may have after all students split into teams.
// 
// 
// DEFINITION
// Class:TeamContestEasy
// Method:worstRank
// Parameters:vector <int>
// Returns:int
// Method signature:int worstRank(vector <int> strength)
// 
// 
// CONSTRAINTS
// -strength will contain between 3 and 48 elements, inclusive.
// -The number of elements in strength will be divisible by 3.
// -Each element of strength will be between 1 and 1,000,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {5, 7, 3, 5, 7, 3, 5, 7, 3}
// 
// Returns: 2
// 
// The strength of your team is 5 + 7 + 3 - min{5, 7, 3} = 12. It is possible that one of the other teams will be stronger than your team. For example, if it consists of students with strengths 5, 7 and 7, then its strength will be 14. However, it is not possible that both other teams will be stronger than your team.
// 
// 1)
// {5, 7, 3}
// 
// Returns: 1
// 
// Just your team. No rivals.
// 
// 2)
// {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
// 
// Returns: 1
// 
// All teams (including yours) will have the same strength: 2.
// 
// 
// 3)
// {2,2,1,1,3,1,3,2,1,3,1,2,1,2,1}
// 
// 
// Returns: 4
// 
// 
// 
// 4)
// {45,72,10,42,67,51,33,21,8,51,17,72}
// 
// 
// Returns: 3
// 
// 
// 
// 5)
// {570466,958327,816467,17,403,953808,734850,5824,917784,921731,161921,1734,823437,3218,81,932681,2704,981643,1232,475,873323,6558,45660,1813,4714,224,
// 32301,28081,6728,17055,561,15146,842613,5559,1860,783,989,2811,20664,112531,1933,866794,805528,53821,2465,137385,39,2007}
// 
// Returns: 6
// 
// 
// 
// 6)
// {610297,849870,523999,6557,976530,731458,7404,795100,147040,110947,159692,40785,4949,2903,1688,37278,620703,28156,16823,1159,12132,971379,5916,1159,988589,
// 12215,133,1490,911360,920059,544070,40249,514852,852,745070,1105,715897,714696,589133,698317,5683,631612,16453,101000,764881,101,2053,754661}
// 
// Returns: 10
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

