// Better than tc solution.
// Well, basically it's bf soluton too.
// we first try 1 * 1, then 2 * 2....until we find the bigest.
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class AlienAndGame {
public:
  int getNumber(vector <string> board) {
    int c = 1;
    int columnSize = board[0].size();
    int rowSize = board.size();
    for (int i = 0; i < rowSize; ++i) {
      for (int j = 0; j < columnSize && j + c < columnSize; ++j) {
        int z = 0;
        for (; z <= c && i + z < rowSize; ++z) {
          if (!checkRow(board, i + z, j, c))
            break;
        }
        if (z > c) {
          ++c;
          --j;
        }
      }
    }
    return c * c;
  }

  bool checkRow(const vector<string> & board, int i, int j, int  c) {
    int z = 1;
    for (; z <= c && j + z < board[0].size(); ++z) {
      if (board[i][j] != board[i][j + z])
        break;
    }
    if (z > c)
      return true;
    else
      return false;
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
  cout << "Test " << testNum << ": [" << "{";
  for (int i = 0; int(p0.size()) > i; ++i) {
    if (i > 0) {
      cout << ",";
    }
    cout << "\"" << p0[i] << "\"";
  }
  cout << "}";
  cout << "]" << endl;
  AlienAndGame *obj;
  int answer;
  obj = new AlienAndGame();
  clock_t startTime = clock();
  answer = obj->getNumber(p0);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << p1 << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << answer << endl;
  if (hasAnswer) {
    res = answer == p1;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  } else if (hasAnswer) {
    cout << "Match :-)" << endl;
  } else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}
int main() {
  bool all_right;
  all_right = true;
	
  vector <string> p0;
  int p1;
	
  {
    // ----- test 0 -----
    string t0[] = {"WBBWBBWBBBBW", "BBWWBBWBWWWW", "WWBBBBWWBBWB", "BBBBBWBBWBWW", "WBWBBBWWWWWW", "BBBWWBWWWBBW", "WBWWWBBWWWBW", "WBWBBWBWBBBW", "WWBBWWWBWBBW", "WWWWBBWWBBBB", "WBWBWWWWBBBW", "BBBWWWWWBBWW", "BBBBWWBBBBBB", "WWBWBBBWWBBW", "WBWWWBWWBBWW", "BBWBWBBBBWBW", "BWWWWBWBBWWB", "WBWWBWWBWWBB", "WWBBBWBWBBBW", "BWWWBWWBBWWB", "BBWBWWBBBBBW", "BBBBWBWBBBWB", "WBWBBBWBWBWB", "WWBBBBWBWWBB", "BBWBWBBBBWBB", "WWBBBWBBBBWB", "BWBWWWBBBWBW", "WBWWWWWWBWBW", "WBWBBWWBBBWB", "BWBWWWWWWBBB"};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 9;
    all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 1 -----
    string t0[] = {"W"};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 1;
    all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 2 -----
    string t0[] = {"WBBB","WBBB","WWWW"};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 9;
    all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 3 -----
    string t0[] = {"W","B","W","W","W"};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 1;
    all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 4 -----
    string t0[] = {"BWBBWBB","WWBWWBW","BBBBBBW","WBBBBWB","BBWWWWB","WWWWWWW","BBWWBBB"};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 9;
    all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
    // ------------------
  }
	
  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  } else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// PROBLEM STATEMENT
// 
// Alien Fred wants to destroy the Earth.
// But before he does that, he wants to play the following game.
// 
// 
// 
// 
// He has a rectangular board divided into unit cells.
// Each cell is initially painted black or white.
// You are given a vector <string> board.
// The character board[i][j] represents the cell with coordinates (i, j).
// Each of those characters is either 'B' (representing a black cell) or 'W' (representing a white cell).
// The game is played in turns.
// In each turn Fred can choose any row of the board and repaint all black cells of the row to white, and vice versa.
// (Note that he can only select rows, not columns. 
// Formally, he can choose an index i and change all characters of board[i].)
// 
// 
// 
// 
// Fred wants to have a large white square somewhere on his board.
// The sides of Fred's square must be parallel to the sides of the board.
// The white square may be a part of a larger white area. 
// (I.e., the cells that touch the square may be both black and white.)
// Find a sequence of turns that produces the largest possible white square somewhere on the board, and return the area of that square.
// 
// 
// DEFINITION
// Class:AlienAndGame
// Method:getNumber
// Parameters:vector <string>
// Returns:int
// Method signature:int getNumber(vector <string> board)
// 
// 
// CONSTRAINTS
// -board will contain between 1 and 50 elements, inclusive.
// -Each element of board will contain between 1 and 50 characters, inclusive.
// -Each element of board will contain the same number of characters.
// -Each character in each element of board will be either 'B' or 'W'.
// 
// 
// EXAMPLES
// 
// 0)
// {"BB",
//  "WW"}
// 
// Returns: 4
// 
// The optimal strategy is to repaint row 0. After this change the entire board will be white, and thus we have a 2*2 white square.
// 
// 1)
// {"W"}
// 
// Returns: 1
// 
// Sometimes the optimal strategy requires no repainting.
// 
// 2)
// {"WBBB",
//  "WBBB",
//  "WWWW"}
// 
// Returns: 9
// 
// We should repaint row 0 and then repaint row 1. 
// The resulting board will contain a 3*3 white square (in rows 0-2 and columns 1-3).
// 
// 3)
// {"W",
//  "B",
//  "W",
//  "W",
//  "W"}
// 
// Returns: 1
// 
// 
// 
// 4)
// {"BWBBWBB",
//  "WWBWWBW",
//  "BBBBBBW",
//  "WBBBBWB",
//  "BBWWWWB",
//  "WWWWWWW",
//  "BBWWBBB"}
// 
// Returns: 9
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

