#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class OptimalList {
public:
  string optimize(string inst) {
    int x = 0;
    int y = 0;
    for (auto c : inst) {
      switch(c) {
      case 'N':
        ++y;
        break;
      case 'S':
        --y;
        break;
      case 'E':
        ++x;
        break;
      case 'W':
        --x;
        break;
      }
    }
    string str;
    if (x > 0)
      str += string(x, 'E');
    if (y > 0)
      str += string(y, 'N');
    if (y < 0)
      str += string(-y, 'S');
    if (x < 0)
      str += string(-x, 'W');
    return str;
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
  cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
  cout << "]" << endl;
  OptimalList *obj;
  string answer;
  obj = new OptimalList();
  clock_t startTime = clock();
  answer = obj->optimize(p0);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << "\"" << p1 << "\"" << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << "\"" << answer << "\"" << endl;
  if (hasAnswer) {
    res = answer == p1;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  } else if (hasAnswer) {
    cout << "Match :-)" << endl;
  } else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}
int main() {
  bool all_right;
  all_right = true;
	
  string p0;
  string p1;
	
  {
    // ----- test 0 -----
    p0 = "NENENNWWWWWS";
    p1 = "NNNWWW";
    all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 1 -----
    p0 = "NNEESSWW";
    p1 = "";
    all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 2 -----
    p0 = "NEWSNWESWESSEWSENSEWSEWESEWWEWEEWESSSWWWWWW";
    p1 = "SSSSSSSSWWW";
    all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 3 -----
    p0 = "NENENE";
    p1 = "EEENNN";
    all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
    // ------------------
  }
	
  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  } else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// PROBLEM STATEMENT
// 
// Billy is going to his grandmother's house. To help him do that, his mother has written down a detailed list of instructions for him to follow. Each instruction is a character 'N', 'S', 'W' or 'E', telling him to go exactly 1 block to the north, south, west or east, respectively. Billy's city consists of an infinitely large grid of streets, where each street extends infinitely to both sides, and the space between 2 adjacent streets going in the same direction is always 1 block.  Billy's house and his grandmother's house are both located at street corners in this city.
// 
// Billy knows that his mother does not always choose the shortest path.  Therefore, he wants to make a new list of instructions that will also lead him to his grandmother's house, but uses the minimum possible number of instructions.
// 
// You will be given inst, a string with the original list made by Billy's mom. Return the new list Billy wants. If
// there are several solutions, return the one that comes first alphabetically.
// 
// 
// DEFINITION
// Class:OptimalList
// Method:optimize
// Parameters:string
// Returns:string
// Method signature:string optimize(string inst)
// 
// 
// CONSTRAINTS
// -inst will contain between 1 and 50 characters, inclusive.
// -Each character of inst will be either 'N', 'S', 'W' or 'E'.
// 
// 
// EXAMPLES
// 
// 0)
// "NENENNWWWWWS"
// 
// Returns: "NNNWWW"
// 
// 
// 
// 1)
// "NNEESSWW"
// 
// Returns: ""
// 
// Billy's grandmother lives in the same place as him, so he can get there without walking the big roundabout path his mother suggests.
// 
// 2)
// "NEWSNWESWESSEWSENSEWSEWESEWWEWEEWESSSWWWWWW"
// 
// Returns: "SSSSSSSSWWW"
// 
// 
// 
// 3)
// "NENENE"
// 
// Returns: "EEENNN"
// 
// The list is already optimal in the number of instructions, but Billy wants the alphabetically first optimal list.
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

