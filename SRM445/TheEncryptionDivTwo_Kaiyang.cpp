#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class TheEncryptionDivTwo {
public:
  string encrypt(string message) {
    vector<int> v(26, 0);
    string str;
    char a = 'a';
    for (auto c : message) {
      if (v[c - 'a'] == 0) 
        v[c - 'a'] = a++;
      str += v[c - 'a'];
    }
    return str;
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
  cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
  cout << "]" << endl;
  TheEncryptionDivTwo *obj;
  string answer;
  obj = new TheEncryptionDivTwo();
  clock_t startTime = clock();
  answer = obj->encrypt(p0);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << "\"" << p1 << "\"" << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << "\"" << answer << "\"" << endl;
  if (hasAnswer) {
    res = answer == p1;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  } else if (hasAnswer) {
    cout << "Match :-)" << endl;
  } else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}
int main() {
  bool all_right;
  all_right = true;
	
  string p0;
  string p1;
	
  {
    // ----- test 0 -----
    p0 = "hello";
    p1 = "abccd";
    all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 1 -----
    p0 = "abcd";
    p1 = "abcd";
    all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 2 -----
    p0 = "topcoder";
    p1 = "abcdbefg";
    all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 3 -----
    p0 = "encryption";
    p1 = "abcdefghib";
    all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
    // ------------------
  }
	
  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  } else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// PROBLEM STATEMENT
// 
// John is obsessed with security.
// He is writing a letter to his friend Brus and he wants nobody else to be able to read it.
// He uses a simple substitution cipher to encode his message.
// Each letter in the message is replaced with its corresponding letter in a substitution alphabet.
// A substitution alphabet is a permutation of all the letters in the original alphabet.
// In this problem, the alphabet will consist of only lowercase letters ('a'-'z').
// 
// 
// 
// For example, if John's message is "hello" and his cipher maps 'h' to 'q', 'e' to 'w', 'l' to 'e' and 'o' to 'r', the encoded message will be "qweer".
// If the cipher maps 'h' to 'a', 'e' to 'b', 'l' to 'c' and 'o' to 'd', then the encoded message will be "abccd".
// 
// 
// 
// Given the original message, determine the cipher that will produce the encoded string that comes earliest alphabetically.
// Return this encoded string.
// In the example above, the second cipher produces the alphabetically earliest encoded string ("abccd").
// 
// 
// 
// DEFINITION
// Class:TheEncryptionDivTwo
// Method:encrypt
// Parameters:string
// Returns:string
// Method signature:string encrypt(string message)
// 
// 
// NOTES
// -If A and B are two strings of the same length, then A comes earlier alphabetically than B if it contains a smaller character at the first position where the strings differ.
// 
// 
// CONSTRAINTS
// -message will contain between 1 and 50 characters, inclusive.
// -message will contain only lowercase letters ('a'-'z').
// 
// 
// EXAMPLES
// 
// 0)
// "hello"
// 
// Returns: "abccd"
// 
// The example from the statement.
// 
// 1)
// "abcd"
// 
// Returns: "abcd"
// 
// Here the message is encoded to itself.
// 
// 2)
// "topcoder"
// 
// Returns: "abcdbefg"
// 
// 3)
// "encryption"
// 
// Returns: "abcdefghib"
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

