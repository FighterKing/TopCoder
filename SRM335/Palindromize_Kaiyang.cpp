#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class Palindromize {
public:
  string minAdds(string s) {
    int size = s.size();
    int i = 0;
    for (; i < size; ++i) {
      string str = s.substr(i);
      string str2(str.rbegin(), str.rend());
      if (str == str2)
        break;
    }
    string str = s.substr(0, i);
    reverse(str.begin(), str.end());
    s += str;
    return s;
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
  cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
  cout << "]" << endl;
  Palindromize *obj;
  string answer;
  obj = new Palindromize();
  clock_t startTime = clock();
  answer = obj->minAdds(p0);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << "\"" << p1 << "\"" << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << "\"" << answer << "\"" << endl;
  if (hasAnswer) {
    res = answer == p1;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  } else if (hasAnswer) {
    cout << "Match :-)" << endl;
  } else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}
int main() {
  bool all_right;
  all_right = true;
	
  string p0;
  string p1;
	
  {
    // ----- test 0 -----
    p0 = "add";
    p1 = "adda";
    all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 1 -----
    p0 = "cigartragic";
    p1 = "cigartragic";
    all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 2 -----
    p0 = "redocpot";
    p1 = "redocpotopcoder";
    all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 3 -----
    p0 = "acaba";
    p1 = "acabaca";
    all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 4 -----
    p0 = "abczyxyz";
    p1 = "abczyxyzcba";
    all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
    // ------------------
  }
	
  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  } else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// PROBLEM STATEMENT
// 
// A palindrome is a string that reads the same from left to right as it does from right to left.  Given a string s, return the shortest palindrome that can be produced by adding zero or more characters to the right end of s.  There is always one unique answer.
// 
// 
// DEFINITION
// Class:Palindromize
// Method:minAdds
// Parameters:string
// Returns:string
// Method signature:string minAdds(string s)
// 
// 
// CONSTRAINTS
// -s will contain between 1 and 50 characters, inclusive.
// -Each character of s will be a lowercase letter ('a'-'z').
// 
// 
// EXAMPLES
// 
// 0)
// "add"
// 
// Returns: "adda"
// 
// Add 'a' to make a palindrome. "adddda" is also a valid palindrome, but it is not the shortest possible one.
// 
// 1)
// "cigartragic"
// 
// Returns: "cigartragic"
// 
// This is already a palindrome, so the shortest solution is to add 0 letters.
// 
// 2)
// "redocpot"
// 
// Returns: "redocpotopcoder"
// 
// 
// 
// 3)
// "acaba"
// 
// Returns: "acabaca"
// 
// 
// 
// 4)
// "abczyxyz"
// 
// Returns: "abczyxyzcba"
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

