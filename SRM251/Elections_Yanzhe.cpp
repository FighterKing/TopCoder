#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class Elections {
private:
	double count(string s) {
		int ones = 0;
		for (auto c : s)
			if (c == '1') ones++;
		return ones / (double)s.size();
	}
public:
	int visit(vector <string> likelihoods) {
		int k = 0;
		double val = count(likelihoods[0]);
		for (int i = 1; i < likelihoods.size(); i++) {
			double c = count(likelihoods[i]);
			if (c < val) {
				val = c;
				k = i;
			}
		}
		return k;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	Elections *obj;
	int answer;
	obj = new Elections();
	clock_t startTime = clock();
	answer = obj->visit(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"1222","1122","1222"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"1222111122","2222222111","11111222221222222222"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"111","112","121","122","211","212","221","222"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 7;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"1122","1221","1212","2112","2121","2211"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"11112222111121","1211221212121","112111222","11122222222111","112121222","1212122211112"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// There are two candidates campaigning to be president of a country.
// From newspaper polls, it is clear what percentages of people plan to vote for each candidate in each state.
// Candidate 1 wants to campaign in one last state, and needs to figure out which state that should be.
// 
// You are given a vector <string> likelihoods, each element of which corresponds to a state. Each element consists of the characters '1' and '2', where '1' represents some number of votes for candidate 1, and '2' represents votes for candidate 2 (in each element every character represents the same number of votes). You are to return an int representing the 0-based index of the state where the lowest percentage of people are planning on voting for candidate 1 (lowest percentage of '1' characters in that element of the input).  If there are multiple such states, return one with the lowest index in likelihoods.
// 
// DEFINITION
// Class:Elections
// Method:visit
// Parameters:vector <string>
// Returns:int
// Method signature:int visit(vector <string> likelihoods)
// 
// 
// CONSTRAINTS
// -likelihoods will contain between 1 and 50 elements inclusive.
// -Each element of likelihoods will contain between 1 and 50 characters inclusive, and each character will be '1' or '2'.
// 
// 
// EXAMPLES
// 
// 0)
// {"1222","1122","1222"}
// 
// Returns: 0
// 
// In the first state only 25% of people prefer candidate 1, while in the second and third, 50% and 25% prefer him, respectively. 
// 
// 1)
// {"1222111122","2222222111","11111222221222222222"}
// 
// Returns: 1
// 
// The percentages of people, prefering candidate 1 to candidate 2 are (in order): 50%, 30%, 30%
// 
// 2)
// {"111","112","121","122","211","212","221","222"}
// 
// Returns: 7
// 
// 3)
// {"1122","1221","1212","2112","2121","2211"}
// 
// Returns: 0
// 
// 4)
// {"11112222111121","1211221212121","112111222","11122222222111","112121222","1212122211112"}
// 
// Returns: 3
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
