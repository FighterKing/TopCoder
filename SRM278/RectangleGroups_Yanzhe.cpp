#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class RectangleGroups {
public:
	string maximalIndexed(vector <string> rectangles) {
		vector<int> indexes(26, 0);
		for (auto str : rectangles) {
			int j;
			for (j = 3; str[j] != ' '; j++) {}
			indexes[str[0]-'A'] += stoi(str.substr(2, j-2)) * stoi(str.substr(j+1));
		}
		int k = 0, v = indexes[0];
		for (int i = 1; i < 26; i++) {
			if (indexes[i] > v) {
				k = i; v = indexes[i];
			}
		}
		return string(1, k + 'A') + " " + to_string(v);
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	RectangleGroups *obj;
	string answer;
	obj = new RectangleGroups();
	clock_t startTime = clock();
	answer = obj->maximalIndexed(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	string p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"A 1 2","A 3 3"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "A 11";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"A 1 2","B 3 3","A 2 1"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "B 9";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"D 1 6","F 2 3","G 1 1","G 5 1","C 3 2"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "C 6";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"S 2 54","Y 34 65","F 234 23","D 84 127","R 603 46","S 36 192","Y 76 32","T 54 28","S 22 22"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "R 27738";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You have a list of rectangles divided into groups. The index of a group is the sum of the areas of all the rectangles in the group. You are to determine the group with the biggest index.
// You are given a vector <string> rectangles. Each element of rectangles represents a single rectangle, and is formatted as "G L W", where G is the name of the group to which the rectangle belongs, L is the rectangle's length, and W is the rectangle's width. Return a string formatted as "G I", where G is the name of the group with the maximal index, and I is the index of that group with no leading zeroes. If there are multiple groups with the same maximal index, return the one whose name comes first alphabetically.
// 
// DEFINITION
// Class:RectangleGroups
// Method:maximalIndexed
// Parameters:vector <string>
// Returns:string
// Method signature:string maximalIndexed(vector <string> rectangles)
// 
// 
// CONSTRAINTS
// -rectangles will contain between 1 and 50 elements, inclusive.
// -Each element of rectangles will be formatted as "G L W", where G is an uppercase letter ('A' - 'Z') and L and W are integers with no leading zeroes.
// -Each L and W will be between 1 and 1000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {"A 1 2", "A 3 3"}
// 
// Returns: "A 11"
// 
// There is only one group, and its index is 11 (1*2 + 3*3).
// 
// 1)
// {"A 1 2", "B 3 3", "A 2 1"}
// 
// Returns: "B 9"
// 
// The index of A is 4, and the index of B is 9.
// 
// 2)
// {"D 1 6", "F 2 3", "G 1 1", "G 5 1", "C 3 2"}
// 
// Returns: "C 6"
// 
// All groups have the same index, and C comes first alphabetically.
// 
// 3)
// {"S 2 54", "Y 34 65", "F 234 23", "D 84 127", "R 603 46",
// "S 36 192", "Y 76 32", "T 54 28", "S 22 22"}
// 
// Returns: "R 27738"
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
