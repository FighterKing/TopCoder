// tc is not better than this solution.
// But I can't prove the correctness and I don't agree with the
// explanation by tc.
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class GearsDiv2 {
public:
  int getmin(string Directions) {
    char last = ' ';
    int count = 0;
    string tmp(Directions);
    for (auto &c : tmp) {
      if (last == c) {
        ++count;
        last = ' ';
        c = last;
      } else {
        last = c;
      }
    }
    if (tmp[tmp.size() - 1] == tmp[0])
      ++count;

    int count2 = 0;
    tmp = Directions;
    if (tmp[0] == tmp[1]) {
      tmp[0] =' ';
      ++count2;
    }
    last = tmp[1];
    for (int i = 2; i < tmp.size(); ++i) {
      if (last == tmp[i]) {
        ++count2;
        last = ' ';
        tmp[i] = last;
      } else {
        last = tmp[i];
      }
    }
    if (tmp[tmp.size() - 1] != ' ' && tmp[tmp.size() - 1] == tmp[0])
        ++count2;
    return min(count2, count);
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
  cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
  cout << "]" << endl;
  GearsDiv2 *obj;
  int answer;
  obj = new GearsDiv2();
  clock_t startTime = clock();
  answer = obj->getmin(p0);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << p1 << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << answer << endl;
  if (hasAnswer) {
    res = answer == p1;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  } else if (hasAnswer) {
    cout << "Match :-)" << endl;
  } else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}
int main() {
  bool all_right;
  all_right = true;
	
  string p0;
  int p1;
	
  {
    // ----- test 0 -----
    p0 = "LRRR";
    p1 = 1;
    all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 1 -----
    p0 = "RRR";
    p1 = 2;
    all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 2 -----
    p0 = "LRLR";
    p1 = 0;
    all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 3 -----
    p0 = "LRLLRRLLLRRRLLLL";
    p1 = 6;
    all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 4 -----
    p0 = "RRRRRRRLRRRRRRRLRLRLLRLRLRLRRLRLRLLLRLRLLRLLRRLRRR";
    p1 = 14;
    all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
    // ------------------
  }
	
  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  } else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// PROBLEM STATEMENT
// Goose Tattarrattat has a machine that contains N gears (cogwheels).
// The gears are numbered 0 through N-1.
// Currently, the gears are arranged into a cycle: for each i, gear i meshes with gears i-1 and i+1 (counting modulo N).
// In particular, gear 0 meshes with gear N-1.
// 
// Let X and Y be two meshing gears.
// Note that if X is turning, Y must clearly be turning in the opposite direction (clockwise vs. counter-clockwise).
// 
// For each of the N gears we have a desired direction of turning.
// You are given this information encoded as a string Directions.
// Character i of Directions is 'R' if we want gear i to turn to the right (clockwise), and it is 'L' if we want it to turn to the left.
// 
// Of course, it may be impossible to satisfy all the desired directions of turning.
// Return the minimal number of gears that have to be removed from the machine so that all remaining gears can turn in the desired directions at the same time.
// 
// DEFINITION
// Class:GearsDiv2
// Method:getmin
// Parameters:string
// Returns:int
// Method signature:int getmin(string Directions)
// 
// 
// NOTES
// -Removing a gear creates a gap between the other gears. For example, after removing the gear 7, gears 6 and 8 will not mesh.
// 
// 
// CONSTRAINTS
// -Directions will contain between 3 and 50 characters, inclusive.
// -Each character of Directions will be 'R' or 'L'.
// 
// 
// EXAMPLES
// 
// 0)
// "LRRR"
// 
// Returns: 1
// 
// Once we remove gear 2, the other three are free to turn in the desired directions.
// 
// 1)
// "RRR"
// 
// Returns: 2
// 
// Gear 0 meshes with gear 2. 
// 
// 2)
// "LRLR"
// 
// Returns: 0
// 
// 
// 
// 3)
// "LRLLRRLLLRRRLLLL"
// 
// Returns: 6
// 
// 
// 
// 4)
// "RRRRRRRLRRRRRRRLRLRLLRLRLRLRRLRLRLLLRLRLLRLLRRLRRR"
// 
// Returns: 14
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

