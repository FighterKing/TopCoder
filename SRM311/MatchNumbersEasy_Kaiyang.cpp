#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class MatchNumbersEasy {
public:
  string maxNumber(vector <int> matches, int n) {
    int size = matches.size();
    int i = 0;
    int minMatches = 0,secondMinMatches;
    for (; i < size; ++i) {
      if (matches[minMatches] >= matches[i]) 
        minMatches = i;
    }
    if (0 == minMatches) {
      secondMinMatches = -1;
      for (i = 1; i < size; ++i) {
        if (secondMinMatches == -1 || matches[secondMinMatches] >= matches[i])
          secondMinMatches = i;
      }
    }
    int num = 0, left = 0;
    vector<int> v;
    if (-1 == secondMinMatches || minMatches != 0) {
      num = n / matches[minMatches];
      vector<int> tmp(num, minMatches);
      left = n % matches[minMatches];
      v.insert(v.begin(), tmp.begin(), tmp.end());
    } else {
      n -= matches[secondMinMatches];
      if (n < 0)
        return "0";
      num = n / matches[minMatches];
      vector<int> tmp(num + 1, minMatches);
      tmp[0] = secondMinMatches;
      v.insert(v.begin(), tmp.begin(), tmp.end());
      left = n % matches[minMatches];
    }
    
    int j = 0;
    for (i = size - 1; i >= 0 && left > 0 && j < v.size(); --i) {
      while (j < v.size() && matches[i] <= (matches[v[j]] + left)) {
        left += matches[v[j]] - matches[i];
        v[j] = i;
        ++j;
      }
    }
    string str;
    for (auto i : v) 
      str += i + '0';
    
    return str;
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, string p2) {
  cout << "Test " << testNum << ": [" << "{";
  for (int i = 0; int(p0.size()) > i; ++i) {
    if (i > 0) {
      cout << ",";
    }
    cout << p0[i];
  }
  cout << "}" << "," << p1;
  cout << "]" << endl;
  MatchNumbersEasy *obj;
  string answer;
  obj = new MatchNumbersEasy();
  clock_t startTime = clock();
  answer = obj->maxNumber(p0, p1);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << "\"" << p2 << "\"" << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << "\"" << answer << "\"" << endl;
  if (hasAnswer) {
    res = answer == p2;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  } else if (hasAnswer) {
    cout << "Match :-)" << endl;
  } else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}
int main() {
  bool all_right;
  all_right = true;
	
  vector <int> p0;
  int p1;
  string p2;
	
  {
    // ----- test 0 -----
    int t0[] = {1};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 1;
    p2 = "0";
    all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  {
    // ----- test 1 -----
    int t0[] = {5,23,24};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 30;
    p2 = "20";
    all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  {
    // ----- test 2 -----
    int t0[] = {1,5,3,2};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 1;
    p2 = "0";
    all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  {
    // ----- test 3 -----
    int t0[] = {1,1,1,1,1,1,1,1,1,1};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 50;
    p2 = "99999999999999999999999999999999999999999999999999";
    all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  } else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// PROBLEM STATEMENT
// 
// Each digit can be represented using a certain number of matches. Your goal is to create the largest possible number using the matches that you have. For example, if you need 6 matches for zero, 7 matches for one, and 8 matches for two, and you have 21 matches, the largest number you can create is 210 (8 + 7 + 6 = 21 matches).
// 
// 
// 
// You are given a vector <int> matches and an int n. The ith element (zero-indexed) of matches is the number of matches needed to represent the digit i. n is the number of matches you have. Return the largest possible number you can create without extra leading zeros.
// 
// 
// 
// DEFINITION
// Class:MatchNumbersEasy
// Method:maxNumber
// Parameters:vector <int>, int
// Returns:string
// Method signature:string maxNumber(vector <int> matches, int n)
// 
// 
// NOTES
// -It is not necessary to use all given matches. Some matches may be left unused.
// 
// 
// CONSTRAINTS
// -matches will contain between 1 and 10 elements, inclusive.
// -Each element of matches will be between 1 and 50, inclusive.
// -n will be between 1 and 50, inclusive.
// -n matches will be enough to construct at least 1 digit.
// 
// 
// EXAMPLES
// 
// 0)
// {6,7,8}
// 21
// 
// Returns: "210"
// 
// Example from the problem statement.
// 
// 
// 
// 1)
// {5,23,24}
// 30
// 
// Returns: "20"
// 
// 24 matches for two and 5 matches for zero. 1 match is left unused.
// 
// 
// 
// 2)
// {1,5,3,2}
// 1
// 
// Returns: "0"
// 
// This is the only number that can be created.
// 
// 
// 
// 3)
// {1,1,1,1,1,1,1,1,1,1}
// 50
// 
// Returns: "99999999999999999999999999999999999999999999999999"
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

