#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class KingXNewBaby {
public:
  string isValid(string name) {
    if (name.size() != 8)
      return "NO";
    int a[26] = {0};
    int b[] = {'a', 'e', 'i', 'o', 'u'};
    for (auto i : name)
      ++a[i - 'a'];
    
    bool count = false;
    for (auto i : b) {
      if (a[i - 'a'] != 0 && a[i - 'a'] != 2)
        return "NO";
      else if (count && a[i - 'a'] == 2)
        return "NO";
      else if (a[i - 'a'] == 2)
        count = true;
    }
    
    return count ? "YES" : "NO";
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	KingXNewBaby *obj;
	string answer;
	obj = new KingXNewBaby();
	clock_t startTime = clock();
	answer = obj->isValid(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	
	{
	// ----- test 0 -----
	p0 = "dengklek";
	p1 = "YES";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "gofushar";
	p1 = "NO";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "dolphinigle";
	p1 = "NO";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "mystictc";
	p1 = "NO";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "rngringo";
	p1 = "NO";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "misof";
	p1 = "NO";
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = "metelsky";
	p1 = "YES";
	all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// King Dengklek is the perfect king of Kingdom of Ducks, where slimes and ducks live together in peace and harmony.
// 
// After several years of waiting, King Dengklek and the queen finally had a baby. Now he is looking for a name for the newborn baby. According to the private rule of Kingdom of Ducks, the name of each member of the royal family must be such that:
// 
// 
// It must consist of exactly eight letters. All letters must be lowercase ('a'-'z').
// It must have exactly two vowels and six consonants. (Vowels are the letters 'a', 'e', 'i', 'o', and 'u'; the rest are consonants.)
// The two vowels must be equal.
// 
// 
// For example, "dengklek" is a valid name because it consists of exactly eight letters: six consonants and two identical vowels, 'e'.
// 
// You are given a String name. Please help the kingdom determine whether name is valid. Return "YES" if it is a valid name for King Dengklek's newborn baby, or "NO" otherwise.
// 
// DEFINITION
// Class:KingXNewBaby
// Method:isValid
// Parameters:string
// Returns:string
// Method signature:string isValid(string name)
// 
// 
// CONSTRAINTS
// -name will contain between 1 and 50 characters, inclusive.
// -Each character of name will be one of 'a'-'z'.
// 
// 
// EXAMPLES
// 
// 0)
// "dengklek"
// 
// Returns: "YES"
// 
// 
// 
// 1)
// "gofushar"
// 
// Returns: "NO"
// 
// It has more than two vowels.
// 
// 2)
// "dolphinigle"
// 
// Returns: "NO"
// 
// It has more than eight letters.
// 
// 3)
// "mystictc"
// 
// Returns: "NO"
// 
// It has only one vowel.
// 
// 4)
// "rngringo"
// 
// Returns: "NO"
// 
// It has exactly two vowels, but they are not equal.
// 
// 5)
// "misof"
// 
// Returns: "NO"
// 
// It has less than eight letters.
// 
// 6)
// "metelsky"
// 
// Returns: "YES"
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
