#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class ColorfulTilesEasy {
public:
  int theMin(string room) {
    int size = room.size();
    int minValue = 0;
    char last = room[0];
    for (int i = 1; i < size; ++i) {
      vector<char> v{'R', 'G', 'B', 'Y'};
      if (last == room[i]) {
        auto it = find(v.begin(), v.end(), last);
        if (it != v.end())
          v.erase(it);
        ++minValue;
        if (i + 1 < size) {
          it = find(v.begin(), v.end(), room[i + 1]);
          if (it != v.end())
            v.erase(it);
          room[i] = v[0];

          last = room[i + 1];
          ++i;
        } else {
          return minValue;
        }
      } else {
        last = room[i];
      }
    }
    return minValue;
      
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
  cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
  cout << "]" << endl;
  ColorfulTilesEasy *obj;
  int answer;
  obj = new ColorfulTilesEasy();
  clock_t startTime = clock();
  answer = obj->theMin(p0);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << p1 << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << answer << endl;
  if (hasAnswer) {
    res = answer == p1;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  } else if (hasAnswer) {
    cout << "Match :-)" << endl;
  } else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}
int main() {
  bool all_right;
  all_right = true;
	
  string p0;
  int p1;
	
  {
    // ----- test 0 -----
    p0 = "RRRRRR";
    p1 = 3;
    all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 1 -----
    p0 = "GGGGGGG";
    p1 = 3;
    all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 2 -----
    p0 = "BBBYYYYYY";
    p1 = 4;
    all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 3 -----
    p0 = "BRYGYBGRYR";
    p1 = 0;
    all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 4 -----
    p0 = "RGGBBBRYYB";
    p1 = 3;
    all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
    // ------------------
  }
	
  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  } else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// PROBLEM STATEMENT
// Taro likes colorful things, especially colorful tiles.
// 
// 
// Taro's room is divided into L square tiles arranged in a row. Each tile is one of the following four colors: red, green, blue or yellow. You are given a string room. If the i-th character of room is 'R', 'G', 'B' or 'Y', the color of the i-th tile is red, green, blue or yellow, respectively.
// 
// 
// He decided to change the color of some tiles so that no two adjacent tiles have the same color. Return the minimal number of tiles he must change.
// 
// DEFINITION
// Class:ColorfulTilesEasy
// Method:theMin
// Parameters:string
// Returns:int
// Method signature:int theMin(string room)
// 
// 
// CONSTRAINTS
// -room will contain between 1 and 10 characters, inclusive.
// -Each character in room will be 'R', 'G', 'B' or 'Y'.
// 
// 
// EXAMPLES
// 
// 0)
// "RRRRRR"
// 
// Returns: 3
// 
// For example, he can change three tiles in the following way:
// "RRRRRR" -> "RGRGRG".
// 
// 1)
// "GGGGGGG"
// 
// Returns: 3
// 
// For example, "GGGGGGG" -> "GRGRGRG".
// 
// 2)
// "BBBYYYYYY"
// 
// Returns: 4
// 
// For example, "BBBYYYYYY" -> "BRBYRYRYR".
// 
// 3)
// "BRYGYBGRYR"
// 
// Returns: 0
// 
// The condition is already satisfied, so he doesn't need to change any tiles.
// 
// 4)
// "RGGBBBRYYB"
// 
// Returns: 3
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

