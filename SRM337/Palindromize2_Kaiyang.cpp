#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class Palindromize2 {
public:
  string minChanges(string s) {
    int size = s.size();
    for (int i = 0; i < size / 2; ++i) {
      if (s[i] != s[size - 1 - i])
        s[i] = s[size - 1 - i] = min(s[i], s[size - 1 - i]);
    }
    return s;
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
  cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
  cout << "]" << endl;
  Palindromize2 *obj;
  string answer;
  obj = new Palindromize2();
  clock_t startTime = clock();
  answer = obj->minChanges(p0);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << "\"" << p1 << "\"" << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << "\"" << answer << "\"" << endl;
  if (hasAnswer) {
    res = answer == p1;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  } else if (hasAnswer) {
    cout << "Match :-)" << endl;
  } else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}
int main() {
  bool all_right;
  all_right = true;
	
  string p0;
  string p1;
	
  {
    // ----- test 0 -----
    p0 = "ameba";
    p1 = "abeba";
    all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 1 -----
    p0 = "cigartragic";
    p1 = "cigartragic";
    all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 2 -----
    p0 = "abcdef";
    p1 = "abccba";
    all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    // ------------------
  }
	
  {
    // ----- test 3 -----
    p0 = "cxbpaxz";
    p1 = "cxapaxc";
    all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
    // ------------------
  }
	
  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  } else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// PROBLEM STATEMENT
// 
// A palindrome is a string that reads the same from left to right as it does from right to left. 
// Given a String s, return a palindrome that is produced by changing the minimum possible 
// number of characters in s. Changing a character means replacing it with any single
// character at the same position.  You are not allowed to remove or add any characters.
// If there are multiple answers, return the one that comes first alphabetically.
// 
// 
// DEFINITION
// Class:Palindromize2
// Method:minChanges
// Parameters:string
// Returns:string
// Method signature:string minChanges(string s)
// 
// 
// CONSTRAINTS
// -s will contain between 1 and 50 characters, inclusive.
// -Each character of s will be a lowercase letter ('a'-'z').
// 
// 
// EXAMPLES
// 
// 0)
// "ameba"
// 
// Returns: "abeba"
// 
// You can get "abeba" or "amema" with only 1 change. Among those two, "abeba" comes earlier alphabetically.
// 
// 1)
// "cigartragic"
// 
// Returns: "cigartragic"
// 
// The input is already a palindrome, so the best choice is to do 0 changes.
// 
// 2)
// "abcdef"
// 
// Returns: "abccba"
// 
// 
// 
// 3)
// "cxbpaxz"
// 
// Returns: "cxapaxc"
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
