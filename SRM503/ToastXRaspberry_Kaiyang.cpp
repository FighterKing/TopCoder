#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class ToastXRaspberry {
public:
  int apply(int upper_limit, int layer_count) {
    if (layer_count % upper_limit == 0)
      return layer_count / upper_limit;
    else
      return layer_count / upper_limit + 1;
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
  cout << "Test " << testNum << ": [" << p0 << "," << p1;
  cout << "]" << endl;
  ToastXRaspberry *obj;
  int answer;
  obj = new ToastXRaspberry();
  clock_t startTime = clock();
  answer = obj->apply(p0, p1);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << p2 << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << answer << endl;
  if (hasAnswer) {
    res = answer == p2;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  } else if (hasAnswer) {
    cout << "Match :-)" << endl;
  } else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}
int main() {
  bool all_right;
  all_right = true;
	
  int p0;
  int p1;
  int p2;
	
  {
    // ----- test 0 -----
    p0 = 4;
    p1 = 13;
    p2 = 4;
    all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  {
    // ----- test 1 -----
    p0 = 8;
    p1 = 5;
    p2 = 1;
    all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  {
    // ----- test 2 -----
    p0 = 73;
    p1 = 265;
    p2 = 4;
    all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  } else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// PROBLEM STATEMENT
// You have some raspberry jam and a slice of plain toast. You're going to create a slice of breathtaking raspberry toast by applying some of the jam to the toast. Each application will apply L layers of raspberry jam, where L is a positive integer (chosen before the application) and L is not greater than upper_limit. A slice of breathtaking raspberry toast is a slice of plain toast that has had exactly layer_count layers of raspberry jam applied. Return the minimum number of applications required to turn a slice of plain toast into a slice of breathtaking raspberry toast.
// 
// DEFINITION
// Class:ToastXRaspberry
// Method:apply
// Parameters:int, int
// Returns:int
// Method signature:int apply(int upper_limit, int layer_count)
// 
// 
// CONSTRAINTS
// -upper_limit will be between 1 and 100, inclusive.
// -layer_count will be between 1 and 1000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 4
// 13
// 
// Returns: 4
// 
// One?possible?way?is?to?apply?4,?4,?3,?then?2?layers?of?jam.
// 
// 1)
// 8
// 5
// 
// Returns: 1
// 
// A?single?application?is?sufficient.
// 
// 2)
// 73
// 265
// 
// Returns: 4
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

